@model FEP.WebApiModel.RnP.UpdatePublicationViewModel

@{
    ViewBag.Title = "Publication Details";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section Nav{
    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                <div class="header-col-right float-right mt-5"><a href="~/RnP/Publication" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="~/Home">Home</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Home">Research & Publication</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Publication">Publication</a></li>
                                <li class="breadcrumb-item"><a href="#">Publication Request</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">Publication Request Ref No: @Model.Auto.RefNo</h1>
                    <div class="header-text"><!--View details of publication.--></div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-xl-3 col-md-3 col-sm-4 my-2">
        <div id="page-nav" class="sidebar-left page-nav">
            <div data-perfect-scrollbar>
                <div class="page-section">
                    <h6 class="x-small color-darkblue"><i class="la la-info-circle font-icon color-secondary align-bottom"></i> Request Information</h6>
                    <ul class="nav page-nav__menu">
                        <li class="nav-item">
                            <a id="tab_details" href="#publication-details" data-toggle="tab" class="nav-link active">Publication Details</a>
                        </li>
                        @if (Model.Cancellation.CancelRemark != "")
                        {
                            <li class="nav-item">
                                <a id="tab_cancellation" href="#publication-cancellation" data-toggle="tab" class="nav-link active">Cancellation Information</a>
                            </li>
                        }
                        @if (Model.Withdrawal.WithdrawalReason != "")
                        {
                            <li class="nav-item">
                                <a id="tab_withdrawal" href="#publication-withdrawal" data-toggle="tab" class="nav-link active">Withdrawal Information</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a id="tab_history" href="#amendment-history" data-toggle="tab" class="nav-link active">Amendment History</a>
                        </li>
                    </ul>
                </div>
                <div>
                    @{ if ((Model.Auto.Status == PublicationStatus.New) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                        {
                            <p><button class="btn btn-secondary btn-block mb-2" id="btnSubmit" data-pubid="@Model.Pub.ID">Submit for Approval</button></p>
                        }
                        else if ((Model.Auto.Status == PublicationStatus.Approved) && (CurrentUser.HasAccess(UserAccess.RnPPublicationPublish)))
                        {
                            <p><button class="btn btn-secondary btn-block mb-2" id="btnPublish" data-pubid="@Model.Pub.ID">Publish on FEP</button></p>
                        }
                        else if ((Model.Auto.Status == PublicationStatus.Published) && (CurrentUser.HasAccess(UserAccess.RnPPublicationWithdraw)))
                        {
                            <p><button class="btn btn-secondary btn-block mb-2" id="btnWithdraw">Withdraw Publication</button></p>
                        }
                        else if (((Model.Auto.Status == PublicationStatus.VerifierRejected) || (Model.Auto.Status == PublicationStatus.ApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                        {
                            <p><button class="btn btn-outline-danger btn-block mb-2" id="btnCancel">Cancel Publication</button></p>
                        }
                        else if (((Model.Auto.Status == PublicationStatus.WithdrawalVerifierRejected) || (Model.Auto.Status == PublicationStatus.WithdrawalApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                        {
                            <p><button class="btn btn-secondary btn-block mb-2" id="btnCancelWithdrawal" data-pubid="@Model.Pub.ID">Cancel Withdrawal</button></p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
        <!-- Start Form -->
        <div class="border-form rounded-top">
            <div class="form-container tab-content">
                <div class="tab-pane active" id="publication-details">
                    <div class="tab-pane" id="setting1">
                        <div class="d-flex align-items-center mb-4 mt-2">
                            <h4 class="color-darkblue mr-auto mb-0">Publication Details<br><span class="small">View publication details below.</span></h4>
                            @{ if (((Model.Auto.Status == PublicationStatus.New) || (Model.Auto.Status == PublicationStatus.VerifierRejected) || (Model.Auto.Status == PublicationStatus.ApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                                {
                                    <a class="btn btn-default btn-sm mw-auto" href="@Url.Action("Edit", "Publication", new { area = "RnP", @id = Model.Pub.ID })"><i class="la la-edit color-secondary"></i>&nbsp;&nbsp;Edit</a>
                                }
                                else if (((Model.Auto.Status == PublicationStatus.WithdrawalVerifierRejected) || (Model.Auto.Status == PublicationStatus.WithdrawalApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationWithdraw)))
                                {
                                    <a class="btn btn-default btn-sm mw-auto" id="btnEditWithdrawal" href="#"><i class="la la-edit color-secondary"></i>&nbsp;&nbsp;Edit Withdrawal</a>
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Auto.RefNo, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Auto.RefNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Auto.Status, htmlAttributes: new { @class = "control-label" })
                            @*Html.EditorFor(model => model.Auto.Status, new { htmlAttributes = new { @class = "form-control bg-warning-ccd", @readonly = "readonly" } })*@
                            @{ if (Model.Auto.Status == PublicationStatus.New)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Draft">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Submitted)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Verification">
                                }
                                else if (Model.Auto.Status == PublicationStatus.VerifierRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Amendment">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Verified)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Approval">
                                }
                                else if (Model.Auto.Status == PublicationStatus.ApproverRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Amendment">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Approved)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Approved">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Published)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Published">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Unpublished)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Unpublished">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Trashed)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Deleted">
                                }
                                else if (Model.Auto.Status == PublicationStatus.NewWithdrawal)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Draft Withdrawal">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalSubmitted)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Pending Verification">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalVerifierRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Pending Amendment">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalVerified)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Pending Approval">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalApproverRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Pending Amendment">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalApproved)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Approved">
                                }
                                else if (Model.Auto.Status == PublicationStatus.Withdrawn)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawn">
                                }
                                else if (Model.Auto.Status == PublicationStatus.WithdrawalTrashed)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Withdrawal Cancelled">
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.CategoryID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.Author, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.Author, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.Coauthor, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.Coauthor, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.Title, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.Title, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Pub.Year, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.Year, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-lg-6">
                            &nbsp;
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.Description, htmlAttributes: new { @class = "control-label" })
                            @*Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" }, @readonly = "readonly", cols = 48, @rows = 5 })*@
                            <textarea id="Description" name="Description" class="form-control" rows="3" readonly="readonly">@Html.ValueFor(model => model.Pub.Description)</textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.Language, htmlAttributes: new { @class = "control-label" })
                            <select class="js-example-basic-multiple" id="pub_lang" name="pub_langs[]" multiple="multiple" style="width: 100%;" disabled="disabled">
                                <option value="Bahasa Malaysia">Bahasa Malaysia</option>
                                <option value="English">English</option>
                            </select>
                            @Html.HiddenFor(model => model.Pub.Language, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.ISBN, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.ISBN, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            Format
                        </div>
                        <div class="form-group col-lg-4">
                            Free?
                        </div>
                        <div class="form-group col-lg-4">
                            Price (RM)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.Hardcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.Hardcopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.FreeHCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.FreeHCopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.EditorFor(model => model.Pub.HPrice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.Digitalcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.Digitalcopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.FreeDCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.FreeDCopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.EditorFor(model => model.Pub.DPrice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.HDcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.HDcopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            <div class="custom-control custom-checkbox">
                                @Html.EditorFor(model => model.Pub.FreeHDCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row", @readonly = "readonly" } })
                                @Html.LabelFor(model => model.Pub.FreeHDCopy, htmlAttributes: new { @class = "custom-control-label" })
                            </div>
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.EditorFor(model => model.Pub.HDPrice, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <!--
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pub.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                            <div class="custom-file">
                                @Html.EditorFor(model => model.Pub.ProofOfApproval, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                <input type="file" class="custom-file-input" name="file" id="inputfile" multiple />
                                <label class="custom-file-label" for="customFile">No file choosen</label>
                            </div>
                            <div id="fileList"></div>
                        </div>
                    </div>
                    -->
                    <div class="row" style="display:none;">
                        <div class="form-group col-lg-12">

                            @Html.LabelFor(model => model.Pub.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.ProofOfApproval, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">

                            @Html.LabelFor(model => model.Pub.StockBalance, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pub.StockBalance, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-lg-6">
                            &nbsp;
                        </div>
                    </div>
                </div>
                @if (Model.Cancellation.CancelRemark != "")
                {
                    <div class="tab-pane" id="publication-cancellation">
                        <div class="mb-4 mt-2 mr-auto">
                            <h4 class="color-darkblue mb-0">Cancellation Details</h4>
                            <h6 class="font-weight-normal">View cancellation details below.</h6>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Cancellation.CancelRemark, htmlAttributes: new { @class = "control-label" })
                                <textarea name="CReason" id="CReason" class="form-control" rows="3" readonly="readonly">@Model.Cancellation.CancelRemark</textarea>
                            </div>
                        </div>
                    </div>
                }
                @if (Model.Withdrawal.WithdrawalReason != "")
                {
                    <div class="tab-pane" id="publication-withdrawal">
                        <div class="mb-4 mt-2 mr-auto">
                            <h4 class="color-darkblue mb-0">Withdrawal Details</h4>
                            <h6 class="font-weight-normal">View withdrawal details below.</h6>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Withdrawal.WithdrawalReason, htmlAttributes: new { @class = "control-label" })
                                <textarea name="WReason" id="WReason" class="form-control" rows="3" readonly="readonly">@Model.Withdrawal.WithdrawalReason</textarea>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Withdrawal.ProofOfWithdrawal, htmlAttributes: new { @class = "control-label" })
                                <input type="text" name="WProof" id="WProof" class="form-control" readonly="readonly" value="@Model.Withdrawal.ProofOfWithdrawal" />
                            </div>
                        </div>
                    </div>
                }
                <div class="tab-pane" id="amendment-history">
                    <div class="mb-4 mt-2 mr-auto">
                        <h4 class="color-darkblue mb-0">Amendment History</h4>
                        <h6 class="font-weight-normal">Check amendment list here.</h6>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            <ul class="list-group list-group-fit">
                                @if (ViewBag.Withdrawal.Count != 0)
                                {
                                    var icount = 0;
                                    foreach (var item in ViewBag.Withdrawal)
                                    {
                                        if (item.Status == PublicationApprovalStatus.Rejected)
                                        {
                                            icount++;
                                            <li class="list-group-item pt-4">
                                                <div class="media align-items-top">
                                                    <div class="media-left">
                                                        <div class="card__avatar">
                                                            <img src="~/dist/assets/images/people/50/guy-6.jpg" alt="Avatar" class="card__avatar__image">
                                                        </div>
                                                    </div>
                                                    <div class="media-body">
                                                        <div class="card__name-wrap ml-0">
                                                            <div class="card__instructby">@item.ApprovalDate.ToString("dd/MM/yyyy, hh:mm tt") <i class="la la-exclamation-circle text-danger"></i></div>
                                                            <div class="card__author-name">@item.UserName</div>
                                                            <div class="card__text pb-3">@item.Remarks</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                }
                                @if (ViewBag.History.Count != 0)
                                {
                                    var icount = 0;
                                    foreach (var item in ViewBag.History)
                                    {
                                        if (item.Status == PublicationApprovalStatus.Rejected)
                                        {
                                            icount++;
                                            <li class="list-group-item pt-4">
                                                <div class="media align-items-top">
                                                    <div class="media-left">
                                                        <div class="card__avatar">
                                                            <img src="~/dist/assets/images/people/50/guy-6.jpg" alt="Avatar" class="card__avatar__image">
                                                        </div>
                                                    </div>
                                                    <div class="media-body">
                                                        <div class="card__name-wrap ml-0">
                                                            <div class="card__instructby">@item.ApprovalDate.ToString("dd/MM/yyyy, hh:mm tt") <i class="la la-exclamation-circle text-danger"></i></div>
                                                            <div class="card__author-name">@item.UserName</div>
                                                            <div class="card__text pb-3">@item.Remarks</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }

                                }

                            </ul>
                        </div>
                    </div>
                </div>
                <!-- popups start -->
                <!-- submit (if requires confirmation, otherwise direct js) -->
                <!-- publish (same as above) -->
                <!-- withraw -->
                <div class="modal fade" id="modalWithdraw" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "formwithdraw", id = "formwithdraw" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="m-4 text-center">
                                    <h4 class="color-darkblue mb-0" id="title_withdrawal">Withdraw Publication</h4>
                                    <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <input type="hidden" class="form-control" name="ID" id="WithdrawID" value="@Model.Pub.ID" />
                                        @Html.LabelFor(model => model.Withdrawal.WithdrawalReason, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                        <textarea class="form-control" name="WithdrawalReason" id="WithdrawalReason" rows="4" placeholder=""></textarea>
                                        <span class="text-danger field-validation-error" id="span_reasonerror" style="display:none;">Please enter Reason for Withdrawal</span>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Withdrawal.ProofOfWithdrawal, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                        <input type="text" class="form-control" name="ProofOfWithdrawal" id="ProofOfWithdrawal" placeholder="" />
                                        <span class="text-danger field-validation-error" id="span_prooferror" style="display:none;">Please upload Proof of Withdrawal</span>
                                    </div>
                                </div>
                                <div class="divider-border"></div>
                                <div class="m-4 text-center">
                                    <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                    <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#withdrawsent" id="btnWithdrawConfirm">Withdraw Publication</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- cancel & cancel withdrawal (only one active) -->
                @if (((Model.Auto.Status == PublicationStatus.VerifierRejected) || (Model.Auto.Status == PublicationStatus.ApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                {
                    <!-- cancel -->
                    <div class="modal fade" id="modalCancel" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "formcancel", id = "formcancel" }))
                        {
                            @Html.AntiForgeryToken()

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="modal-dialog modal-sm" role="document">
                                <div class="modal-content">
                                    <div class="m-4 text-center">
                                        <h4 class="color-darkblue mb-0">Cancel Publication Request</h4>
                                        <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                                    </div>
                                    <div class="modal-body">
                                        <div class="form-group">
                                            <input type="hidden" class="form-control" name="ID" id="CancelID" value="@Model.Pub.ID" />
                                            @Html.LabelFor(model => model.Cancellation.CancelRemark, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                            <textarea class="form-control" name="CancelRemark" id="CancelRemark" rows="4" placeholder=""></textarea>
                                            <span class="text-danger field-validation-error" id="span_remarkerror" style="display:none;">Please enter Remarks</span>
                                        </div>
                                    </div>
                                    <div class="divider-border"></div>
                                    <div class="m-4 text-center">
                                        <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                        <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#cancelsent" id="btnCancelConfirm">Cancel Publication</button><!-- erk, both cancel -->
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (((Model.Auto.Status == PublicationStatus.WithdrawalVerifierRejected) || (Model.Auto.Status == PublicationStatus.WithdrawalApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPPublicationEdit)))
                {
                    <!-- cancel withdrawal (KIV) -->
                    <div class="modal fade" id="modalCancelWithdrawal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "formcancelwithdrawal", id = "formcancelwithdrawal" }))
                        {
                            @Html.AntiForgeryToken()

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="modal-dialog modal-sm" role="document">
                                <div class="modal-content">
                                    <div class="m-4 text-center">
                                        <h4 class="color-darkblue mb-0">Cancel Publication Withdrawal</h4>
                                        <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                                    </div>
                                    <div class="modal-body">
                                        <div class="form-group">
                                            <input type="hidden" class="form-control" name="ID" id="CancelID" value="@Model.Pub.ID" />
                                            @Html.LabelFor(model => model.Cancellation.CancelRemark, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                            <textarea class="form-control" name="CancelRemark" id="CancelRemark" rows="4" placeholder=""></textarea>
                                            <span class="text-danger field-validation-error" id="span_withdrawalremarkerror" style="display:none;">Please enter Remarks</span>
                                        </div>
                                    </div>
                                    <div class="divider-border"></div>
                                    <div class="m-4 text-center">
                                        <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                        <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#cancelsent" id="btnCancelWithdrawalConfirm">Cancel Withdrawal</button><!-- erk, both cancel -->
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                <!-- ajax result - success -->
                <div class="modal fade" id="modalOperationSuccess" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" id="btnCloseOperationSuccess" class="close" data-dismiss="modal" data-pubid="@Model.Pub.ID" data-operation="" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body text-center">
                                <img src="~/img/icon-confirmation.svg" alt="image">
                                <h4 class="color-darkblue mt-4" id="resultSuccessTitle">Success!</h4>
                                <p class="small" id="resultSuccessText">Operation successful.</p>
                            </div>
                            <!-- Bila xde modal footer -->
                            <div class="modal-footer py-0">&nbsp;</div>
                        </div>
                    </div>
                </div>
                <!-- ajax result - failure -->
                <div class="modal fade" id="modalOperationFail" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" id="btnCloseOperationFail" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body text-center">
                                <img src="~/img/icon-confirmation.svg" alt="image"><!-- TODO: failed icon -->
                                <h4 class="color-darkblue mt-4" id="resultFailTitle">Failure!</h4>
                                <p class="small" id="resultFailText">Operation unsuccessful.</p>
                            </div>
                            <!-- Bila xde modal footer -->
                            <div class="modal-footer py-0">&nbsp;</div>
                        </div>
                    </div>
                </div>
                <!-- popups end -->
            </div>
            <!-- action log start -->
            <div class="action-log">
                <h5 class="color-darkblue mr-auto mb-0"><i class="la la-comment color-secondary"></i>&nbsp;&nbsp;Action Log</h5>
                <div data-perfect-scrollbar class="position-relative">
                    @if (Model.Cancellation.CancelRemark != "")
                    {
                        string cdate = "Unknown Date";
                        string ctime = "Unknown Time";
                        if (Model.Auto.DateCancelled.HasValue)
                        {
                            cdate = Model.Auto.DateCancelled.Value.ToString("dd/MM/yyyy");
                            ctime = Model.Auto.DateCancelled.Value.ToString("hh:mm tt");
                        }
                        <div class="border-form rounded mg-b-10">
                            <p class="small text-muted">@cdate<span class="fl-right">@ctime</span></p>
                            <p class="small"><span class="card__author-name color-darkblue">@Model.Pub.CreatorName</span><br>- <span class="color-yellow">cancelled the Publication</span></p>
                        </div>
                    }
                    @if (ViewBag.Withdrawal.Count != 0)
                    {
                        var icount = 0;
                        foreach (var item in ViewBag.Withdrawal)
                        {
                            icount++;
                            <div class="border-form rounded mg-b-10">
                                <p class="small text-muted">@item.ApprovalDate.ToString("dd/MM/yyyy")<span class="fl-right">@item.ApprovalDate.ToString("hh:mm tt")</span></p>
                                @if (item.Status == PublicationApprovalStatus.Approved)
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Withdrawal Approval Result<br>- <span class="color-green">Approved</span></p>
                                }
                                else
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Withdrawal Approval Result<br>- <span class="color-yellow">Require Amendment</span></p>
                                }
                                <p class="small"><strong>Remarks:</strong> <em>@item.Remarks</em></p>
                            </div>
                        }
                    }
                    @if (Model.Withdrawal.WithdrawalReason != "")
                    {
                        string wdate = "Unknown Date";
                        string wtime = "Unknown Time";
                        if (Model.Auto.WithdrawalDate.HasValue)
                        {
                            wdate = Model.Auto.WithdrawalDate.Value.ToString("dd/MM/yyyy");
                            wtime = Model.Auto.WithdrawalDate.Value.ToString("hh:mm tt");
                        }
                        <div class="border-form rounded mg-b-10">
                            <p class="small text-muted">@wdate<span class="fl-right">@wtime</span></p>
                            <p class="small"><span class="card__author-name color-darkblue">@Model.Pub.CreatorName</span><br>withdrew the Publication.</p>
                        </div>
                    }
                    @if (ViewBag.History.Count != 0)
                    {
                        var icount = 0;
                        foreach (var item in ViewBag.History)
                        {
                            icount++;
                            <div class="border-form rounded mg-b-10">
                                <p class="small text-muted">@item.ApprovalDate.ToString("dd/MM/yyyy")<span class="fl-right">@item.ApprovalDate.ToString("hh:mm tt")</span></p>
                                @if (item.Status == PublicationApprovalStatus.Approved)
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Approval Result<br>- <span class="color-green">Approved</span></p>
                                }
                                else
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Approval Result<br>- <span class="color-yellow">Require Amendment</span></p>
                                }
                                <p class="small"><strong>Remarks:</strong> <em>@item.Remarks</em></p>
                            </div>
                        }

                    }
                    <div class="border-form rounded mg-b-10">
                        <p class="small text-muted">@Model.Auto.DateAdded.ToString("dd/MM/yyyy")<span class="fl-right">@Model.Auto.DateAdded.ToString("hh:mm tt")</span></p>
                        <p class="small"><span class="card__author-name color-darkblue">@Model.Pub.CreatorName</span><br>created the Publication.</p>
                    </div>
                </div>
            </div>
            <!-- action log end -->
            <!-- End Form -->
        </div>
    </div>
</div>

@section ContentScript {
    <script type="text/javascript">
        $(document).ready(function () {

            // populate language selection

            var selectedLang = $('#Pub_Language').val();
            if (selectedLang.indexOf("English") >= 0) {
                $('#pub_lang option').each(function () {
                    if ($(this).text() == "English") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedLang.indexOf("Bahasa Malaysia") >= 0) {
                $('#pub_lang option').each(function () {
                    if ($(this).text() == "Bahasa Malaysia") {
                        $(this).prop("selected", true);
                    }
                });
            }
            $('#pub_lang').trigger('change');

            // tab switching

            $('#tab_details').click(function () {
                $('#publication-details').show();
                $('#publication-cancellation').hide();
                $('#publication-withdrawal').hide();
                $('#amendment-history').hide();
            });

            $('#tab_cancellation').click(function () {
                $('#publication-details').hide();
                $('#publication-cancellation').show();
                $('#publication-withdrawal').hide();
                $('#amendment-history').hide();
            });

            $('#tab_withdrawal').click(function () {
                $('#publication-details').hide();
                $('#publication-cancellation').hide();
                $('#publication-withdrawal').show();
                $('#amendment-history').hide();
            });

            $('#tab_history').click(function () {
                $('#publication-details').hide();
                $('#publication-cancellation').hide();
                $('#publication-withdrawal').hide();
                $('#amendment-history').show();
            });

            // submit - may change if js alert or onscreen confirmation is required

            $('#btnSubmit').click(function (event) {
                var pid = $(this).data('pubid');
                var url = '@Url.Action("SubmitByID", "Publication", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });

            // publish - may change if js alert or onscreen confirmation is required

            $('#btnPublish').click(function (event) {
                var pid = $(this).data('pubid');
                var url = '@Url.Action("PublishByID", "Publication", new { area = "RnP" })?id=' + pid;
                //alert(url);
                window.location = url;
            });

            // withdraw - requires input, shows success notification, and redirects to details view (refreshes)
            // note: refresh is needed because action buttons will need to change

            $('#btnWithdraw').click(function (event) {
                $('#title_withdrawal').val("Withdraw Publication");
                $('#modalWithdraw').modal();
            });

            $('#btnEditWithdrawal').click(function (event) {
                $('#title_withdrawal').val("Edit Publication Withdrawal");
                $('#modalWithdraw').modal();
            });

            function ValidWithdrawal() {
                var wreason = $('#WithdrawalReason').val();
                var wproof = $('#ProofOfWithdrawal').val();
                $('#span_reasonerror').hide();
                $('#span_prooferror').hide();
                if (wreason.trim() == "") {
                    $('#span_reasonerror').show();
                }
                if (wproof.trim() == "") {
                    $('#span_prooferror').show();
                }
                if ((wreason.trim() == "") || (wproof.trim() == "")) {
                    return false;
                }
                return true;
            }

            $('#btnWithdrawConfirm').click(function (event) {
                if (!ValidWithdrawal()) {
                    return false;
                }
                var form = $('#formwithdraw');
                //alert(form.serialize());
                //return false;
                var myurl = '@Url.Action("Withdraw", "Publication", new { area = "RnP" })';
                $.ajax({
                    url: myurl,
                    type: "POST",
                    data: form.serialize(),
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Withdraw Publication');
                            $("#resultFailText").text('Operation to withdraw publication unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Withdrawal Request Sent');
                            $("#resultSuccessText").text('Your request for withdrawal of the Publication has been sent for approval.');
                            $("#btnCloseOperationSuccess").data('operation', "withdraw");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // cancel - requires input, shows success notification, and redirects to details view (refreshes)
            // note: refresh is needed because action buttons will need to change

            $('#btnCancel').click(function (event) {
                $('#modalCancel').modal();
            });

            function ValidCancellation() {
                var cremarks = $('#CancelRemark').val();
                $('#span_remarkerror').hide();
                if (cremarks.trim() == "") {
                    $('#span_remarkerror').show();
                    return false;
                }
                return true;
            }

            $('#btnCancelConfirm').click(function (event) {
                if (!ValidCancellation()) {
                    return false;
                }
                var form = $('#formcancel');
                //alert(form.serialize());
                //return false;
                var myurl = '@Url.Action("Cancel", "Publication", new { area = "RnP" })';
                $.ajax({
                    url: myurl,
                    type: "POST",
                    data: form.serialize(),
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Cancel Publication');
                            $("#resultFailText").text('Operation to cancel Publication unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Publication Cancellation Successful');
                            $("#resultSuccessText").text('Publication cancelled successfully. Publication can no longer be edited or submitted for Approval.');
                            $("#btnCloseOperationSuccess").data('operation', "cancel");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // cancel withdrawal - may require input, shows success notification, and redirects to details view (refreshes)
            // note: refresh is needed because action buttons will need to change

            $('#btnCancelWithdrawal').click(function (event) {
                $('#modalCancelWithdrawal').modal();
            });

            function ValidWithdrawalCancellation() {
                var cremarks = $('#CancelRemark').val();
                $('#span_withdrawalremarkerror').hide();
                if (cremarks.trim() == "") {
                    $('#span_withdrawalremarkerror').show();
                    return false;
                }
                return true;
            }

            $('#btnCancelWithdrawalConfirm').click(function (event) {
                if (!ValidWithdrawalCancellation()) {
                    return false;
                }
                var form = $('#formcancelwithdrawal');
                //alert(form.serialize());
                //return false;
                var myurl = '@Url.Action("CancelWithdrawal", "Publication", new { area = "RnP" })';
                $.ajax({
                    url: myurl,
                    type: "POST",
                    data: form.serialize(),
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Cancel Publication Withdrawal');
                            $("#resultFailText").text('Operation to cancel Publication Withdrawal unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Publication Withdrawal Cancellation Successful');
                            $("#resultSuccessText").text('Publication Withdrawal cancelled successfully. Publication will remain available to Users.');
                            $("#btnCloseOperationSuccess").data('operation', "cancelwithdrawal");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // redirection after success

            $('#btnCloseOperationSuccess').click(function (event) {
                var pid = $(this).data('pubid');
                var pop = $(this).data('operation');    // in case needed in future
                var url = '@Url.Action("Details", "Publication", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });

            $('#modalOperationSuccess').on( "hidden.bs.modal", function () {
                var pid = $('#btnCloseOperationSuccess').data('pubid');
                var pop = $('#btnCloseOperationSuccess').data('operation');    // in case needed in future
                var url = '@Url.Action("Details", "Publication", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });

        });
    </script>
}


