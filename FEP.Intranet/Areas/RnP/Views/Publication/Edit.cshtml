@model FEP.WebApiModel.RnP.UpdatePublicationModel

@{
    ViewBag.Title = "Edit Publication";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section Nav{
    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                <div class="header-col-right float-right mt-5"><a href="~/RnP/Publication" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="~/Home">Home</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Home">Research & Publication</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Publication">Publication</a></li>
                                <li class="breadcrumb-item"><a href="#">Edit Publication</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">Edit Publication</h1>
                    <div class="header-text">Edit publication.</div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-xl-3 col-md-3 col-sm-4 my-2">
            <div class="sidebar-left">
                <!-- Steps -->
                <div class="sidebar-inner sticky">
                    <ul class="steps steps-vertical">
                        <li class="step-item complete">
                            <a href="" class="step-link">
                                <span class="step-number">1</span>
                                <span class="step-title">Select Publication Category</span>
                            </a>
                        </li>
                        <li class="step-item active">
                            <a href="" class="step-link">
                                <span class="step-number">2</span>
                                <span class="step-title">Edit Publication Details</span>
                            </a>
                        </li>
                        <li class="step-item disabled">
                            <a href="" class="step-link">
                                <span class="step-number">3</span>
                                <span class="step-title">Review & Submission</span>
                            </a>
                        </li>
                    </ul>
                    <!-- End Steps -->
                </div>
            </div>
        </div>
        <div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
            <!-- Start Form -->
            <div class="border-form rounded-top">
                    <div class="form-container">
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label" })
                                @Html.HiddenFor(model => model.ID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control", @placeholder = "Name of the Author" } })
                                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Coauthor, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Coauthor, new { htmlAttributes = new { @class = "form-control", @placeholder = "Names of Co-Authors (if any)" } })
                                @Html.ValidationMessageFor(model => model.Coauthor, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Title of Publication" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label" })
                                @*Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @placeholder = "Year of Publication" } })*@
                                <select name="Year" id="Year" class="form-control"></select>
                                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-lg-6">
                                &nbsp;
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                                @*Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "Description of Publication", cols = 48, @rows = 5 })*@
                                <textarea id="Description" name="Description" class="form-control" rows="3" placeholder="Description of Publication">@Html.ValueFor(model => model.Description)</textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Language, htmlAttributes: new { @class = "control-label" })
                                <select class="js-example-basic-multiple" id="pub_lang" name="pub_langs[]" multiple="multiple" style="width: 100%;">
                                    <option value="Bahasa Malaysia">Bahasa Malaysia</option>
                                    <option value="English">English</option>
                                </select>
                                @Html.HiddenFor(model => model.Language, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Language, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control", @placeholder = "ISBN/ISSN/DOI Number" } })
                                @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-4">
                                Format
                            </div>
                            <div class="form-group col-lg-4">
                                Free?
                            </div>
                            <div class="form-group col-lg-4">
                                Price (RM)
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.Hardcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.Hardcopy, htmlAttributes: new { @class = "custom-control-label" })
                                    @Html.ValidationMessageFor(model => model.Hardcopy, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.FreeHCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.FreeHCopy, htmlAttributes: new { @class = "custom-control-label" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                @Html.EditorFor(model => model.HPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.Digitalcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.Digitalcopy, htmlAttributes: new { @class = "custom-control-label" })
                                    @Html.ValidationMessageFor(model => model.Digitalcopy, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.FreeDCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.FreeDCopy, htmlAttributes: new { @class = "custom-control-label" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                @Html.EditorFor(model => model.DPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.HDcopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.HDcopy, htmlAttributes: new { @class = "custom-control-label" })
                                    @Html.ValidationMessageFor(model => model.HDcopy, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                <div class="custom-control custom-checkbox">
                                    @Html.EditorFor(model => model.FreeHDCopy, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                    @Html.LabelFor(model => model.FreeHDCopy, htmlAttributes: new { @class = "custom-control-label" })
                                </div>
                            </div>
                            <div class="form-group col-lg-4">
                                @Html.EditorFor(model => model.HDPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HDPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!--
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                                <div class="custom-file">
                                    @Html.EditorFor(model => model.ProofOfApproval, new { htmlAttributes = new { @class = "form-control" } })
                                    <input type="file" class="custom-file-input" name="file" id="inputfile" multiple />
                                    <label class="custom-file-label" for="customFile">No file choosen</label>
                                    @Html.ValidationMessageFor(model => model.ProofOfApproval, "", new { @class = "text-danger" })
                                </div>
                                <div id="fileList"></div>
                            </div>
                        </div>
                        -->
                        <div class="row" style="display:none;">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.ProofOfApproval, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProofOfApproval, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(model => model.StockBalance, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.StockBalance, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "Quantity in Stock" })
                                @Html.ValidationMessageFor(model => model.StockBalance, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-lg-6">
                                &nbsp;
                            </div>
                        </div>
                    </div>
                <!-- End Form -->
            </div>
            <div class="border-left border-right border-bottom p-3 rounded-bottom">
                <!--input type="submit" value="Create" class="btn btn-default" /-->
                @Html.HiddenFor(model => model.CreatorId, new { htmlAttributes = new { @class = "form-control" } })
                <a class="btn btn-default" href="@Url.Action("Index", "Publication", new { area = "RnP" })" data-toggle="tooltip" data-placement="top" title="Back">Back</a>
                <button type="submit" class="btn btn-default" id="btnSave" name="Submittype" value="Save"><i class="la la-save font-icon" style="font-size: 1.5rem;"></i>Save as Draft</button>
                <button type="submit" class="btn btn-secondary" id="btnSubmit" name="Submittype" value="Submit">Review for Submission</button>
            </div>
        </div>
    </div>

}

@section ContentScript {
    <script type="text/javascript">
        $(document).ready(function () {

            var iyear = @Model.Year;
            var dbyear = iyear.toString();

            function populateYears() {
                var currentdate = new Date();
                var currentyear = currentdate.getFullYear();
                var startyear = 1900;
                var endyear = currentyear;
                var selected = '';
                for (var i = startyear; i <= endyear; i++) {
                    selected = '';
                    if (i.toString() == dbyear) {
                        selected = ' selected';
                    }
                    $('#Year').append('<option value="' + i + '"' + selected + '>' + i + '</option>');
                }
            }

            var selectedLang = $('#Language').val();
            if (selectedLang.indexOf("English") >= 0) {
                $('#pub_lang option').each(function () {
                    if ($(this).text() == "English") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedLang.indexOf("Bahasa Malaysia") >= 0) {
                $('#pub_lang option').each(function () {
                    if ($(this).text() == "Bahasa Malaysia") {
                        $(this).prop("selected", true);
                    }
                });
            }
            $('#pub_lang').trigger('change');

            if ($('#Hardcopy').is(':checked')) {
                if ($('#FreeHCopy').is(':checked')) {
                    $('#HPrice').prop('readonly', true);
                } else {
                    $('#HPrice').prop('readonly', false);
                }
            } else {
                $('#HPrice').prop('readonly', true);
            }

            if ($('#Digitalcopy').is(':checked')) {
                if ($('#FreeDCopy').is(':checked')) {
                    $('#DPrice').prop('readonly', true);
                } else {
                    $('#DPrice').prop('readonly', false);
                }
            } else {
                $('#DPrice').prop('readonly', true);
            }

            if ($('#HDcopy').is(':checked')) {
                if ($('#FreeHDCopy').is(':checked')) {
                    $('#HDPrice').prop('readonly', true);
                } else {
                    $('#HDPrice').prop('readonly', false);
                }
            } else {
                $('#HDPrice').prop('readonly', true);
            }

            $('#pub_lang').change(function () {
                var selectedValues = [];
                var selectedText = "";
                $("#pub_lang :selected").each(function () {
                    selectedValues.push($(this).val());
                });
                selectedText = selectedValues.join();
                $("#Language").val(selectedText);
            });

            $('#Hardcopy').change(function () {
                if ($('#Hardcopy').is(':checked')) {
                    $('#HPrice').val('0.00');
                    $('#HPrice').prop('readonly', false);
                } else {
                    $('#FreeHCopy').prop('checked', false);
                    $('#HPrice').val('0.00');
                    $('#HPrice').prop('readonly', true);
                }
            });

            $('#FreeHCopy').change(function () {
                if ($('#FreeHCopy').is(':checked')) {
                    $('#Hardcopy').prop('checked', true);
                    $('#HPrice').val('0.00');
                    $('#HPrice').prop('readonly', true);
                } else {
                    $('#HPrice').prop('readonly', false);
                }
            });

            $('#Digitalcopy').change(function () {
                if ($('#Digitalcopy').is(':checked')) {
                    $('#DPrice').val('0.00');
                    $('#DPrice').prop('readonly', false);
                } else {
                    $('#FreeDCopy').prop('checked', false);
                    $('#DPrice').val('0.00');
                    $('#DPrice').prop('readonly', true);
                }
            });

            $('#FreeDCopy').change(function () {
                if ($('#FreeDCopy').is(':checked')) {
                    $('#Digitalcopy').prop('checked', true);
                    $('#DPrice').val('0.00');
                    $('#DPrice').prop('readonly', true);
                } else {
                    $('#DPrice').prop('readonly', false);
                }
            });

            $('#HDcopy').change(function () {
                if ($('#HDcopy').is(':checked')) {
                    $('#HDPrice').val('0.00');
                    $('#HDPrice').prop('readonly', false);
                } else {
                    $('#FreeHDCopy').prop('checked', false);
                    $('#HDPrice').val('0.00');
                    $('#HDPrice').prop('readonly', true);
                }
            });

            $('#FreeHDCopy').change(function () {
                if ($('#FreeHDCopy').is(':checked')) {
                    $('#HDcopy').prop('checked', true);
                    $('#HDPrice').val('0.00');
                    $('#HDPrice').prop('readonly', true);
                } else {
                    $('#HDPrice').prop('readonly', false);
                }
            });

            populateYears();

        });
    </script>
}

