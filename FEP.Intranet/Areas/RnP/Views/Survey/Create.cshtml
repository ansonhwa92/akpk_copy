@model FEP.WebApiModel.RnP.UpdateSurveyModel

@{
    ViewBag.Title = "Create Survey";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section Nav{
    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                <div class="header-col-right float-right mt-5"><a href="~/RnP/Survey" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="~/Home">Home</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Home">Research & Publication</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Survey">Survey</a></li>
                                <li class="breadcrumb-item"><a href="#">Create Survey</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">Create Survey</h1>
                    <div class="header-text">Create new survey.</div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-xl-3 col-md-3 col-sm-4 my-2">
            <div class="sidebar-left">
                <!-- Steps -->
                <div class="sidebar-inner sticky">
                    <ul class="steps steps-vertical">
                        <li class="step-item complete">
                            <a href="" class="step-link">
                                <span class="step-number">1</span>
                                <span class="step-title">Select Survey Type</span>
                            </a>
                        </li>
                        <li class="step-item active">
                            <a href="" class="step-link">
                                <span class="step-number">2</span>
                                <span class="step-title">Fill In Survey Details</span>
                            </a>
                        </li>
                        <li class="step-item disabled">
                            <a href="" class="step-link">
                                <span class="step-number">3</span>
                                <span class="step-title">Design Survey Questions</span>
                            </a>
                        </li>
                        <li class="step-item disabled">
                            <a href="" class="step-link">
                                <span class="step-number">4</span>
                                <span class="step-title">Review & Submission</span>
                            </a>
                        </li>
                    </ul>
                    <!-- End Steps -->
                </div>
            </div>
        </div>
        <div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
            <!-- Start Form -->
            <div class="border-form rounded-top">
                <div class="form-container">
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                            @Html.HiddenFor(model => model.ID, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.HiddenFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                            @*Html.EnumDropDownListFor(model => model.Type, new { @class = "form-control", @Value = @ViewBag.TypeId, @readonly = "readonly" })*@
                            <input class="form-control" type="text" name="TypeName" id="TypeName" readonly="readonly" value="@ViewBag.TypeName">
                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
                            @Html.EnumDropDownListFor(model => model.Category, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Title of the Survey" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                            @*Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "Description of Publication", cols = 48, @rows = 2 })*@
                            <textarea id="Description" name="Description" class="form-control" rows="3" placeholder="Description of Survey"></textarea>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @if (ViewBag.TypeId == 0)
                    {
                        <div class="row" style="display:none;">
                            <div class="form-group col-lg-12">
                                @Html.HiddenFor(model => model.TargetGroup, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    }
                    else if (ViewBag.TypeId == 0)
                    {
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.TargetGroup, htmlAttributes: new { @class = "control-label" })
                                <select class="js-example-basic-multiple" id="survey_group" name="survey_groups[]" multiple="multiple" style="width: 100%;" placeholder="Select group(s)">
                                    <option value="Group 1">Group 1</option>
                                    <option value="Group 2">Group 2</option>
                                    <option value="Group 3">Group 3</option>
                                    <option value="Group 4">Group 4</option>
                                    <option value="Group 5">Group 5</option>
                                </select>
                                @Html.HiddenFor(model => model.TargetGroup, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TargetGroup, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label", @title = "The start date of the Survey duration" })
                            <div class="dateSelect">
                                <input type="text" id="date_start" class="form-control" placeholder="Date Start" data-input="flatpickr">
                                <a class="input-button calendar" title="toggle" data-toggle>
                                    <i class="la la-calendar"></i>
                                </a>
                                <a class="input-button clear" title="clear" data-clear>
                                    <i class="la la-times"></i>
                                </a>
                            </div>
                            @Html.HiddenFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label", @title = "The end date of the Survey duration" })
                            <div class="dateSelect">
                                <input type="text" id="date_end" class="form-control" placeholder="Date End" data-input="flatpickr">
                                <a class="input-button calendar" title="toggle" data-toggle>
                                    <i class="la la-calendar"></i>
                                </a>
                                <a class="input-button clear" title="clear" data-clear>
                                    <i class="la la-times"></i>
                                </a>
                            </div>
                            @Html.HiddenFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pictures, htmlAttributes: new { @class = "control-label" })
                            <div class="custom-file">
                                @Html.EditorFor(model => model.Pictures, new { htmlAttributes = new { @class = "form-control" } })
                                <input type="file" class="custom-file-input" name="file" id="inputfile" multiple />
                                <label class="custom-file-label" for="customFile">No file choosen</label>
                                @Html.ValidationMessageFor(model => model.Pictures, "", new { @class = "text-danger" })
                            </div>
                            <div id="fileList"></div>
                        </div>
                    </div>
                    -->
                    <!--
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                            <div class="custom-file">
                                @Html.EditorFor(model => model.ProofOfApproval, new { htmlAttributes = new { @class = "form-control" } })
                                <input type="file" class="custom-file-input" name="file" id="inputfile" multiple />
                                <label class="custom-file-label" for="customFile">No file choosen</label>
                                @Html.ValidationMessageFor(model => model.ProofOfApproval, "", new { @class = "text-danger" })
                            </div>
                            <div id="fileList"></div>
                        </div>
                    </div>
                    -->
                    <div class="row" style="display:none;">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Pictures, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Pictures, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Pictures, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row" style="display:none;">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ProofOfApproval, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProofOfApproval, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <!-- End Form -->
            </div>
            <div class="border-left border-right border-bottom p-3 rounded-bottom">
                <!--input type="submit" value="Create" class="btn btn-default" /-->
                <a class="btn btn-default" href="@Url.Action("SelectType", "Survey", new { area = "RnP" })" data-toggle="tooltip" data-placement="top" title="Back">Back</a>
                <button type="submit" class="btn btn-secondary" id="btnSave" name="Submittype" value="Save">Next</button>
            </div>
        </div>
    </div>

}

@section ContentScript {
    <script type="text/javascript">
        $(document).ready(function () {
            $("#date_start").flatpickr({
                dateFormat: "d/m/Y",
                minDate: "today",
                maxDate: "31/01/3000",
                onChange: function (selectedDates, dateStr, instance) {
                    $("#StartDate").val(dateStr);
                },
            });
            $("#date_end").flatpickr({
                dateFormat: "d/m/Y",
                minDate: "today",
                maxDate: "31/01/3000",
                onChange: function (selectedDates, dateStr, instance) {
                    $("#EndDate").val(dateStr);
                },
            });
            /*
            $('#Type').change(function () {
                var selectedType = $('#Type option:selected').text();
                if (selectedType == "Public Survey") {
                    //$('#row_targetgroup').hide();
                    $('#survey_group').val("");
                    $('#survey_group').select2("destroy");
                    $('#survey_group').prop("disabled", true);
                    $('#survey_group').select2();
                    $('#TargetGroup').val("");
                } else {
                    //$('#row_targetgroup').show();
                    $('#survey_group').val("");
                    $('#survey_group').select2("destroy");
                    $('#survey_group').prop("disabled", false);
                    $('#survey_group').select2();
                    $('#TargetGroup').val("");
                }
            });
            */
            $('#survey_group').change(function () {
                var selectedValues = [];
                var selectedText = "";
                $("#survey_group :selected").each(function () {
                    selectedValues.push($(this).val());
                });
                selectedText = selectedValues.join();
                $("#TargetGroup").val(selectedText);
            });
        });
    </script>
}

