@model FEP.WebApiModel.RnP.UpdateSurveyViewModel

@{
    ViewBag.Title = "Survey Details";
    Layout = "~/Views/Shared/_LayoutSurveyTester.cshtml";
}

@section Nav{
    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                <div class="header-col-right float-right mt-5"><a href="~/RnP/Survey" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="~/Home">Home</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Home">Research & Publication</a></li>
                                <li class="breadcrumb-item"><a href="~/RnP/Survey">Survey</a></li>
                                <li class="breadcrumb-item"><a href="#">Survey Request</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">Survey Request Ref No: @Model.Auto.RefNo</h1>
                    <div class="header-text"><!--View details of survey.--></div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-xl-3 col-md-3 col-sm-4 my-2">
        <div id="page-nav" class="sidebar-left page-nav">
            <div data-perfect-scrollbar>
                <div class="page-section">
                    <h6 class="x-small color-darkblue"><i class="la la-info-circle font-icon color-secondary align-bottom"></i> Request Information</h6>
                    <ul class="nav page-nav__menu">
                        <li class="nav-item">
                            <a id="tab_details" href="#survey-details" data-toggle="tab" class="nav-link active">Survey Details</a>
                        </li>
                        <li class="nav-item">
                            <a id="tab_design" href="#survey-design" data-toggle="tab" class="nav-link active">Survey Design</a>
                        </li>
                        @if (Model.Cancellation.CancelRemark != "")
                        {
                            <li class="nav-item">
                                <a id="tab_cancellation" href="#survey-cancellation" data-toggle="tab" class="nav-link active">Cancellation Information</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a id="tab_history" href="#amendment-history" data-toggle="tab" class="nav-link active">Amendment History</a>
                        </li>
                    </ul>
                </div>
                <div>
                    @{ if ((Model.Auto.Status == SurveyStatus.New) && (CurrentUser.HasAccess(UserAccess.RnPSurveyEdit)))
                        {
                            <p><button class="btn btn-secondary btn-block" id="btnSubmit" data-surveyid="@Model.Survey.ID">Submit for Verification</button></p>
                        }
                        else if ((Model.Auto.Status == SurveyStatus.Approved) && (CurrentUser.HasAccess(UserAccess.RnPSurveyPublish)))
                        {
                            <p><button class="btn btn-secondary btn-block" id="btnPublish" data-surveyid="@Model.Survey.ID">Publish on FEP</button></p>
                        }
                        else if (((Model.Auto.Status == SurveyStatus.VerifierRejected) || (Model.Auto.Status == SurveyStatus.ApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPSurveyEdit)))
                        {
                            <p><button class="btn btn-outline-danger btn-block" id="btnCancel">Cancel Survey</button></p>
                        }
                        else if ((Model.Auto.Status == SurveyStatus.Published) && (CurrentUser.HasAccess(UserAccess.RnPSurveyPublish)))
                        {
                            <p><button class="btn btn-secondary btn-block" id="btnExtend" data-surveyid="@Model.Survey.ID">Extend Survey Date</button></p>
                            <p><button class="btn btn-default btn-block" id="btnUnpublish" data-surveyid="@Model.Survey.ID">Unpublish from FEP</button></p>
                        }
                        else if ((Model.Auto.Status == SurveyStatus.Unpublished) && (CurrentUser.HasAccess(UserAccess.RnPSurveyPublish)))
                        {
                            <p><button class="btn btn-secondary btn-block" id="btnPublish" data-surveyid="@Model.Survey.ID">Re-publish on FEP</button></p>
                        }
                        <p><a class="btn btn-default btn-block" id="btnTest" href="@Url.Action("Test", "Survey", new { area = "RnP", @id = Model.Survey.ID })" target="_blank">Test Survey</a></p>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
        <!-- Start Form -->
        <div class="border-form rounded-top">
            <div class="form-container tab-content">
                <div class="tab-pane active" id="survey-details">
                    <div class="tab-pane" id="setting1">
                        <div class="d-flex align-items-center mb-4 mt-2">
                            <h4 class="color-darkblue mr-auto mb-0">Survey Details<br><span class="small">View survey details below.</span></h4>
                            @{ if (((Model.Auto.Status == SurveyStatus.New) || (Model.Auto.Status == SurveyStatus.VerifierRejected) || (Model.Auto.Status == SurveyStatus.ApproverRejected)) && (CurrentUser.HasAccess(UserAccess.RnPSurveyEdit)))
                                {
                                    <a class="btn btn-default btn-sm mw-auto" href="@Url.Action("Edit", "Survey", new { area = "RnP", @id = Model.Survey.ID })"><i class="la la-edit color-secondary"></i>&nbsp;&nbsp;Edit</a>
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Auto.RefNo, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Auto.RefNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Auto.Status, htmlAttributes: new { @class = "control-label" })
                            @*Html.EditorFor(model => model.Auto.Status, new { htmlAttributes = new { @class = "form-control bg-warning-ccd", @readonly = "readonly" } })*@
                            @{ if (Model.Auto.Status == SurveyStatus.New)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Draft">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Submitted)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Verification">
                                }
                                else if (Model.Auto.Status == SurveyStatus.VerifierRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Amendment">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Verified)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Approval @ViewBag.ApprovalStage">
                                }
                                else if (Model.Auto.Status == SurveyStatus.ApproverRejected)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Pending Amendment">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Approved)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Approved">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Published)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Published">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Unpublished)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Unpublished">
                                }
                                else if (Model.Auto.Status == SurveyStatus.Trashed)
                                {
                                    <input class="form-control bg-warning-ccd" name="Auto.Status" id="Auto_Status" type="text" readonly="readonly" value="Cancelled">
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.Type, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Survey.Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.Category, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Survey.Category, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.Title, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Survey.Title, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.Description, htmlAttributes: new { @class = "control-label" })
                            @*Html.TextAreaFor(model => model.Survey.Description, new { htmlAttributes = new { @class = "form-control" }, @readonly = "readonly", cols = 48, @rows = 5 })*@
                            <textarea id="Description" name="Description" class="form-control" rows="3" readonly="readonly">@Html.ValueFor(model => model.Survey.Description)</textarea>
                        </div>
                    </div>
                    @if (ViewBag.TypeName == "Public Mass")
                    {
                        <div class="row" style="display:none;">
                            <div class="form-group col-lg-12">
                                @Html.HiddenFor(model => model.Survey.TargetGroup, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    }
                    else if (ViewBag.TypeName == "Targeted Groups")
                    {
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Survey.TargetGroup, htmlAttributes: new { @class = "control-label" })
                                <select class="js-example-basic-multiple" id="survey_group" name="survey_groups[]" multiple="multiple" style="width: 100%;" disabled="disabled">
                                    @if (ViewBag.Groups != null)
                                    {
                                        foreach (var group in ViewBag.Groups)
                                        {

                                            <option value="@group.ID">@group.Name</option>
                                        }
                                    }
                                </select>
                                @Html.HiddenFor(model => model.Survey.TargetGroup, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Survey.StartDate, htmlAttributes: new { @class = "control-label", @title = "The start date of the Survey duration" })
                            @Html.EditorFor(model => model.Survey.StartDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.Survey.EndDate, htmlAttributes: new { @class = "control-label", @title = "The end date of the Survey duration" })
                            @Html.EditorFor(model => model.Survey.EndDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.RequireLogin, htmlAttributes: new { @class = "control-label" })
                            <div class="custom-control custom-radio">
                                @Html.RadioButtonFor(model => model.Survey.RequireLogin, "true", new { id = "yes" })
                                @Html.Label("yes", "Yes")
                                <br />
                                @Html.RadioButtonFor(model => model.Survey.RequireLogin, "false", new { id = "no" })
                                @Html.Label("no", "No")
                                @Html.ValidationMessageFor(model => model.Survey.RequireLogin, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.CoverPictures, htmlAttributes: new { @class = "control-label" })
                            @Html.Partial("_CoverPictureDetails", Model.Survey.CoverPictures)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.AuthorPictures, htmlAttributes: new { @class = "control-label" })
                            @Html.Partial("_AuthorPictureDetails", Model.Survey.AuthorPictures)
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            @Html.LabelFor(model => model.Survey.ProofOfApproval, htmlAttributes: new { @class = "control-label" })
                            @Html.Partial("_ProofOfApprovalDetails", Model.Survey.ProofOfApproval)
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="survey-design">
                    <div class="mb-4 mt-2 mr-auto">
                        <h4 class="color-darkblue mb-0">Survey Design</h4>
                        <h6 class="font-weight-normal">View survey design below.</h6>
                    </div>
                    <div class="row">
                        <div id="surveyContainer"></div>
                        <textarea id="Contents" name="Contents" class="form-control" rows="3" style="display:none;">@Model.Contents.Contents</textarea>
                    </div>
                </div>
                @if (Model.Cancellation.CancelRemark != "")
                {
                    <div class="tab-pane" id="publication-cancellation">
                        <div class="mb-4 mt-2 mr-auto">
                            <h4 class="color-darkblue mb-0">Cancellation Details</h4>
                            <h6 class="font-weight-normal">View cancellation details below.</h6>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.LabelFor(model => model.Cancellation.CancelRemark, htmlAttributes: new { @class = "control-label" })
                                <textarea name="CReason" id="CReason" class="form-control" rows="3" readonly="readonly">@Model.Cancellation.CancelRemark</textarea>
                            </div>
                        </div>
                    </div>
                }
                <div class="tab-pane" id="amendment-history">
                    <div class="mb-4 mt-2 mr-auto">
                        <h4 class="color-darkblue mb-0">Amendment History</h4>
                        <h6 class="font-weight-normal">Check amendment list here.</h6>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-12">
                            <ul class="list-group list-group-fit">
                                @if (ViewBag.History.Count != 0)
                                {
                                    var icount = 0;
                                    foreach (var item in ViewBag.History)
                                    {
                                        if (item.Status == SurveyApprovalStatus.Rejected)
                                        {
                                            icount++;
                                            <li class="list-group-item pt-4">
                                                <div class="media align-items-top">
                                                    <div class="media-left">
                                                        <div class="card__avatar">
                                                            <img src="~/dist/assets/images/people/50/guy-6.jpg" alt="Avatar" class="card__avatar__image">
                                                        </div>
                                                    </div>
                                                    <div class="media-body">
                                                        <div class="card__name-wrap ml-0">
                                                            <div class="card__instructby">@item.ApprovalDate.ToString("dd/MM/yyyy, hh:mm tt") <i class="la la-exclamation-circle text-danger"></i></div>
                                                            <div class="card__author-name">@item.UserName</div>
                                                            <div class="card__text pb-3">@item.Remarks</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }

                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- popups start -->
                <!-- submit (if requires confirmation, otherwise direct js) -->
                <!-- publish (same as above) -->
                <!-- cancel -->
                <div class="modal fade" id="modalCancel" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "formcancel", id = "formcancel" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="m-4 text-center">
                                    <h4 class="color-darkblue mb-0">Cancel Survey Request</h4>
                                    <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <input type="hidden" class="form-control" name="ID" id="CancelID" value="@Model.Survey.ID" />
                                        @Html.LabelFor(model => model.Cancellation.CancelRemark, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                        <textarea class="form-control" name="CancelRemark" id="CancelRemark" rows="4" placeholder=""></textarea>
                                        <span class="text-danger field-validation-error" id="span_remarkerror" style="display:none;">Please enter Remarks</span>
                                    </div>
                                </div>
                                <div class="divider-border"></div>
                                <div class="m-4 text-center">
                                    <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                    <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#cancelsent" id="btnCancelConfirm">Submit Cancellation</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- extend -->
                <div class="modal fade" id="modalExtend" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "formextend", id = "formextend" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="m-4 text-center">
                                    <h4 class="color-darkblue mb-0">Extend Survey Request</h4>
                                    <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                                </div>
                                <div class="modal-body">
                                    <input type="hidden" class="form-control" name="ID" id="ExtendID" value="@Model.Survey.ID" />
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Extension.NewStartDate, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                        <div class="dateSelect">
                                            <input type="text" id="date_start" class="form-control" placeholder="Date Start" data-input="flatpickr">
                                            <a class="input-button calendar" title="toggle" data-toggle>
                                                <i class="la la-calendar"></i>
                                            </a>
                                            <a class="input-button clear" title="clear" data-clear>
                                                <i class="la la-times"></i>
                                            </a>
                                        </div>
                                        @Html.HiddenFor(model => model.Extension.NewStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                        <input type="hidden" id="NewStartDate" name="NewStartDate" value="" />
                                        <span class="text-danger field-validation-error" id="span_startdateerror" style="display:none;">Invalid Start Date</span>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Extension.NewEndDate, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                        <div class="dateSelect">
                                            <input type="text" id="date_end" class="form-control" placeholder="Date End" data-input="flatpickr">
                                            <a class="input-button calendar" title="toggle" data-toggle>
                                                <i class="la la-calendar"></i>
                                            </a>
                                            <a class="input-button clear" title="clear" data-clear>
                                                <i class="la la-times"></i>
                                            </a>
                                        </div>
                                        @Html.HiddenFor(model => model.Extension.NewEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                        <input type="hidden" id="NewEndDate" name="NewEndDate" value="" />
                                        <span class="text-danger field-validation-error" id="span_enddateerror" style="display:none;">Invalid End Date</span>
                                    </div>
                                </div>
                                <div class="divider-border"></div>
                                <div class="m-4 text-center">
                                    <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                    <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#extendsent" id="btnExtendConfirm">Extend Survey</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- unpublish -->
                <div class="modal fade" id="modalUnpublish" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body text-center">
                                <img src="~/img/icon-confirmation.svg" alt="image">
                                <h4 class="color-darkblue mt-4">Are you sure to Unpublish the Survey?</h4>
                                <p class="small">Once unpublished, Survey can be re-published at any time if necessary.</p>
                            </div>
                            <div class="divider-border"></div>
                            <div class="m-4 text-center">
                                <button class="btn btn-default font-weight-normal mr-2" data-dismiss="modal" aria-label="Close">Cancel</button>
                                <button class="btn btn-secondary" data-toggle="modal" data-dismiss="modal" data-target="#unpublishsent" id="btnUnpublishConfirm">Unpublish Survey</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ajax result - success -->
                <div class="modal fade" id="modalOperationSuccess" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" id="btnCloseOperationSuccess" class="close" data-dismiss="modal" data-surveyid="@Model.Survey.ID" data-operation="" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body text-center">
                                <img src="~/img/icon-confirmation.svg" alt="image">
                                <h4 class="color-darkblue mt-4" id="resultSuccessTitle">Success!</h4>
                                <p class="small" id="resultSuccessText">Operation successful.</p>
                            </div>
                            <!-- Bila xde modal footer -->
                            <div class="modal-footer py-0">&nbsp;</div>
                        </div>
                    </div>
                </div>
                <!-- ajax result - failure -->
                <div class="modal fade" id="modalOperationFail" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" id="btnCloseOperationFail" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body text-center">
                                <img src="~/img/icon-confirmation.svg" alt="image"><!-- TODO: failed icon -->
                                <h4 class="color-darkblue mt-4" id="resultFailTitle">Failure!</h4>
                                <p class="small" id="resultFailText">Operation unsuccessful.</p>
                            </div>
                            <!-- Bila xde modal footer -->
                            <div class="modal-footer py-0">&nbsp;</div>
                        </div>
                    </div>
                </div>
                <!-- popups end -->
            </div>
            <!-- action log start -->
            <div class="action-log">
                <h5 class="color-darkblue mr-auto mb-0"><i class="la la-comment color-secondary"></i>&nbsp;&nbsp;Action Log</h5>
                <div data-perfect-scrollbar class="position-relative">
                    @if (Model.Cancellation.CancelRemark != "")
                    {
                        string cdate = "Unknown Date";
                        string ctime = "Unknown Time";
                        if (Model.Auto.DateCancelled.HasValue)
                        {
                            cdate = Model.Auto.DateCancelled.Value.ToString("dd/MM/yyyy");
                            ctime = Model.Auto.DateCancelled.Value.ToString("hh:mm tt");
                        }
                        <div class="border-form rounded mg-b-10">
                            <p class="small text-muted">@cdate<span class="fl-right">@ctime</span></p>
                            <p class="small"><span class="card__author-name color-darkblue">@Model.Survey.CreatorName</span><br>- <span class="color-yellow">cancelled the Survey</span></p>
                        </div>
                    }
                    @if (ViewBag.History.Count != 0)
                    {
                        var icount = 0;
                        foreach (var item in ViewBag.History)
                        {
                            icount++;
                            <div class="border-form rounded mg-b-10">
                                <p class="small text-muted">@item.ApprovalDate.ToString("dd/MM/yyyy")<span class="fl-right">@item.ApprovalDate.ToString("hh:mm tt")</span></p>
                                @if (item.Status == SurveyApprovalStatus.Approved)
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Approval Result<br>- <span class="color-green">Approved</span></p>
                                }
                                else
                                {
                                    <p class="small"><span class="card__author-name color-darkblue">@item.UserName</span><br>:Designation: Approval Result<br>- <span class="color-yellow">Require Amendment</span></p>
                                }
                                <p class="small"><strong>Remarks:</strong> <em>@item.Remarks</em></p>
                            </div>
                        }

                    }
                    <div class="border-form rounded mg-b-10">
                        <p class="small text-muted">@Model.Auto.DateAdded.ToString("dd/MM/yyyy")<span class="fl-right">@Model.Auto.DateAdded.ToString("hh:mm tt")</span></p>
                        <p class="small"><span class="card__author-name color-darkblue">@Model.Survey.CreatorName</span><br>created the Survey.</p>
                    </div>
                </div>
            </div>
            <!-- action log end -->
            <!-- End Form -->
        </div>
    </div>
</div>

@section ContentScript {
    <script type="text/javascript">
        $(document).ready(function () {

            // populate survey contents

            //var scontent = $('#Contents').val();
            //surveyCreator.text = scontent;

            var surveyJSON = $('#Contents').val();

            var survey = new Survey.Model(surveyJSON);

            $("#surveyContainer").Survey({
                model: survey
            });

            // format date picker

            $("#Survey_StartDate").flatpickr({
                dateFormat: "d/m/Y",
                maxDate: "31/12/2200",
            });

            $("#Survey_EndDate").flatpickr({
                dateFormat: "d/m/Y",
                maxDate: "31/12/2200",
            });

            var tstart = $('#Extension_NewStartDate').val();
            var tend = $('#Extension_NewEndDate').val();
            tstart = tstart.substr(0, 10);
            tend = tend.substr(0, 10);
            $('#Extension_NewStartDate').val(tstart);
            $('#Extension_NewEndDate').val(tend);
            $('#NewStartDate').val(tstart);
            $('#NewEndDate').val(tend);
            var mystart = $('#Extension_NewStartDate').val();
            var myend = $('#Extension_NewEndDate').val();

            function sortDates(dateType, dateStr) {
                var date1 = $('#Extension_NewStartDate').val();
                var date2 = $('#Extension_NewEndDate').val();
                var revdate1 = date1.substr(6, 4) + date1.substr(3, 2) + date1.substr(0, 2);
                var revdate2 = date2.substr(6, 4) + date2.substr(3, 2) + date2.substr(0, 2);
                if (dateType == 1) {
                    if (revdate2 < revdate1) {
                        $('#Extension_NewEndDate').val(date1);
                        $('#NewEndDate').val(date1);
                        $("#date_end").val(date1);
                    }
                }
                else if (dateType == 2) {
                    if (revdate2 < revdate1) {
                        $('#Extension_NewStartDate').val(date2);
                        $('#NewStartDate').val(date2);
                        $("#date_start").val(date2);
                    }
                }
            }

            $("#date_start").flatpickr({
                dateFormat: "d/m/Y",
                defaultDate: mystart,
                minDate: "today",
                maxDate: "31/01/2200",
                onChange: function (selectedDates, dateStr, instance) {
                    $("#Extension_NewStartDate").val(dateStr);
                    $("#NewStartDate").val(dateStr);
                    sortDates(1, dateStr);
                },
            });

            $("#date_end").flatpickr({
                dateFormat: "d/m/Y",
                defaultDate: myend,
                minDate: "today",
                maxDate: "31/01/2200",
                onChange: function (selectedDates, dateStr, instance) {
                    $("#Extension_NewEndDate").val(dateStr);
                    $("#NewEndDate").val(dateStr);
                    sortDates(2, dateStr);
                },
            });

            // populate target groups

            var selectedGroup = $('#Survey_TargetGroup').val();
            var grouparray = selectedGroup.split(',');

            $.each(grouparray, function (index, item) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == item) {
                        $(this).prop("selected", true);
                    }
                });
            });
            /*
            if (selectedGroup.indexOf("Group 1") >= 0) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == "Group 1") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedGroup.indexOf("Group 2") >= 0) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == "Group 2") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedGroup.indexOf("Group 3") >= 0) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == "Group 3") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedGroup.indexOf("Group 4") >= 0) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == "Group 4") {
                        $(this).prop("selected", true);
                    }
                });
            }
            if (selectedGroup.indexOf("Group 5") >= 0) {
                $('#survey_group option').each(function () {
                    if ($(this).text() == "Group 5") {
                        $(this).prop("selected", true);
                    }
                });
            }
            */
            $('#survey_group').trigger('change');

            // tab switching

            $('#tab_details').click(function () {
                $('#survey-details').show();
                $('#survey-design').hide();
                $('#survey-cancellation').hide();
                $('#amendment-history').hide();
            });

            $('#tab_design').click(function () {
                $('#survey-details').hide();
                $('#survey-design').show();
                $('#survey-cancellation').hide();
                $('#amendment-history').hide();
            });

            $('#tab_cancellation').click(function () {
                $('#survey-details').hide();
                $('#survey-design').hide();
                $('#survey-cancellation').show();
                $('#amendment-history').hide();
            });

            $('#tab_history').click(function () {
                $('#survey-details').hide();
                $('#survey-design').hide();
                $('#survey-cancellation').hide();
                $('#amendment-history').show();
            });

            // submit - may change if js alert or onscreen confirmation is required

            $('#btnSubmit').click(function (event) {
                var pid = $(this).data('surveyid');
                var url = '@Url.Action("SubmitByID", "Survey", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });

            // publish - may change if js alert or onscreen confirmation is required

            $('#btnPublish').click(function (event) {
                var pid = $(this).data('surveyid');
                var url = '@Url.Action("PublishByID", "Survey", new { area = "RnP" })?id=' + pid;
                //alert(url);
                window.location = url;
            });

            // extend - requires input, shows success notification, and redirects to details view (refreshes)

            $('#btnExtend').click(function (event) {
                $('#modalExtend').modal();
            });

            function ValidExtension() {
                return true;
            }

            $('#btnExtendConfirm').click(function (event) {
                if (!ValidExtension()) {
                    return false;
                }
                var form = $('#formextend');
                //alert(form.serialize());
                //return false;
                var myurl = '@Url.Action("Extend", "Survey", new { area = "RnP" })';
                $.ajax({
                    url: myurl,
                    type: "POST",
                    data: form.serialize(),
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Extend Survey');
                            $("#resultFailText").text('Operation to extend Survey unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Survey Extension Successful');
                            $("#resultSuccessText").text('Survey extended successfully. Survey can now be accessed between the new Start Date and End Date.');
                            $("#btnCloseOperationSuccess").data('operation', "extend");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // unpublish - requires input, shows success notification, and redirects to details view (refreshes)

            $('#btnUnpublish').click(function (event) {
                $('#modalUnpublish').modal();
            });

            function ValidUnpublication() {
                return true;
            }

            $('#btnUnpublishConfirm').click(function (event) {
                if (!ValidUnpublication()) {
                    return false;
                }
                var pid = $("#btnUnpublish").data('surveyid');
                var myurl = '@Url.Action("Unpublish", "Survey", new { area = "RnP" })?id=' + pid;
                $.ajax({
                    url: myurl,
                    type: "POST",
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Unpublish Survey');
                            $("#resultFailText").text('Operation to unpublish Survey unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Unpublishing of Survey Successful');
                            $("#resultSuccessText").text('Survey unpublished successfully. Survey can no longer be accessed by respondents.');
                            $("#btnCloseOperationSuccess").data('operation', "unpublish");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // cancel - requires input, shows success notification, and redirects to details view (refreshes)
            // note: refresh is needed because action buttons will need to change

            $('#btnCancel').click(function (event) {
                $('#modalCancel').modal();
            });

            function ValidCancellation() {
                var cremarks = $('#CancelRemark').val();
                $('#span_remarkerror').hide();
                if (cremarks.trim() == "") {
                    $('#span_remarkerror').show();
                    return false;
                }
                return true;
            }

            $('#btnCancelConfirm').click(function (event) {
                if (!ValidCancellation()) {
                    return false;
                }
                var form = $('#formcancel');
                //alert(form.serialize());
                //return false;
                var myurl = '@Url.Action("Cancel", "Survey", new { area = "RnP" })';
                $.ajax({
                    url: myurl,
                    type: "POST",
                    data: form.serialize(),
                    success: function (data) {
                        if (data == "error") {
                            $("#resultFailTitle").text('Failed to Cancel Survey');
                            $("#resultFailText").text('Operation to cancel Survey unsuccessful! Please try again later.');
                            $("#modalOperationFail").modal();
                        }
                        else {
                            $("#resultSuccessTitle").text('Survey Cancellation Successful');
                            $("#resultSuccessText").text('Survey cancelled successfully. Survey can no longer be edited or submitted for Approval.');
                            $("#btnCloseOperationSuccess").data('operation', "cancel");
                            $("#modalOperationSuccess").modal();
                        }
                    }
                });
            });

            // redirection after success

            $('#btnCloseOperationSuccess').click(function (event) {
                var pid = $(this).data('surveyid');
                var pop = $(this).data('operation');    // in case needed in future
                var url = '@Url.Action("Details", "Survey", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });

            $('#modalOperationSuccess').on( "hidden.bs.modal", function () {
                var pid = $('#btnCloseOperationSuccess').data('surveyid');
                var pop = $('#btnCloseOperationSuccess').data('operation');    // in case needed in future
                var url = '@Url.Action("Details", "Survey", new { area = "RnP" })?id=' + pid;
                window.location = url;
            });
        });
    </script>
}
