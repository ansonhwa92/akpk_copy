@model FEP.WebApiModel.Template.CreateNotificationTemplateModel

@{
    ViewBag.Title = "Create Email Template";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section Contentscript{

    <link href="~/Scripts/summernote/summernote-lite.css" rel="stylesheet" />
    <script src="~/Scripts/summernote/summernote-lite.js"></script>
    <script src="~/Scripts/jquery-ui.min.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {

            var t = $('.tabledata').DataTable({
				"columnDefs": [{
					"searchable": false,
					"orderable": false,
					"targets": [0]
				}],
				"order": [[1, 'asc']],
				"paging": true,
				"lengthChange": true,
				"searching": false,
				"ordering": true,
				"info": true,
				"autoWidth": true,
				"language": {
					"emptyTable": "No record found"
                },
                "bLengthChange": false,
				//"lengthMenu": [10, 25, 50],
				buttons: [{
					extend: 'csvHtml5',
					title: 'Export Field Of Research List',
					//fieldSeparator:'|',
					exportOptions: {
						columns: [1]
					}
				}]
			});
			t.on('order.dt search.dt', function () {
				t.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
					cell.innerHTML = i + 1;
				});
			}).draw();

			$('#export').click(function () { t.button('0').trigger(); });

            var currentElement = "subject";

            $('#summernote').summernote({
                placeholder: 'Type email here',
                tabsize: 2,
                height: 300,
                //width: $('#textareaContainer').parent().width() + ($('#textareaContainer').parent().width() * 0.3)
                callbacks: {
                    onFocus: function() {
                        currentElement = "body";
                    }
                }
            });

            $('#TemplateSubject').click(function () {
                currentElement = "subject";
            });

            $('.addParam').click(function () {
                if (currentElement == "subject") {
                    var currentVal = $('#TemplateSubject').val();
                    var caretPos = document.getElementById("TemplateSubject").selectionStart;
                    var textAreaTxt = jQuery("#TemplateSubject").val();
                    var txtToAdd = $.trim($(this).text());
                    jQuery("#TemplateSubject").val(textAreaTxt.substring(0, caretPos) + txtToAdd + textAreaTxt.substring(caretPos) );
                }
                if (currentElement == "body") {
                    $('#summernote').summernote('saveRange');

                    // Editor loses selected range (e.g after blur)

                    $('#summernote').summernote('restoreRange');
                    $('#summernote').summernote('focus');
                    $('#summernote').summernote('insertText', $.trim($(this).text()));
                }
            });

            $('#emailBox').hide();
            $('#SMSBox').hide();
            $('#webBox').hide();

            $('#enableEmail').click(function () {
                if ($(this).is(':checked')) {
                    $('#emailBox').show();
                }
                else {
                    $('#emailBox').hide();
                }
                
            });

            $('#enableSMSMessage').click(function () {
                if ($(this).is(':checked')) {
                    $('#SMSBox').show();
                }
                else {
                    $('#SMSBox').hide();
                }
            });

            $('#enableWebMessage').click(function () {
                if ($(this).is(':checked')) {
                    $('#webBox').show();
                }
                else {
                    $('#webBox').hide();
                }
            });

            // limit SMSMessage text
            var SMStext_max = 160;
            $('#SMStextarea_feedback').html(SMStext_max + ' characters remaining');

            $('#SMSMessage').keyup(function() {
                var text_length = $('#SMSMessage').val().length;
                var text_remaining = SMStext_max - text_length;

                $('#SMStextarea_feedback').html(text_remaining + ' characters remaining');
            });

            // limit WEBMessage text
            var WEBtext_max = 100;
            $('#WEBtextarea_feedback').html(WEBtext_max + ' characters remaining');

            $('#WEBMessage').keyup(function() {
                var text_length = $('#WEBMessage').val().length;
                var text_remaining = WEBtext_max - text_length;

                $('#WEBtextarea_feedback').html(text_remaining + ' characters remaining');
            });

            $('.modal-dialog').draggable({
                handle: ".modal-header"
              });
        });
    </script>


}

@section Nav {

    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                @*<div class="header-col-right float-right mt-5"><a href="e-Learning.html" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>*@
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home", new { area = "" })">Home</a></li>
                                <li class="breadcrumb-item"><a href="javascript:void(0)">Template</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">Notification Template List</h1>
                    @*<div class="header-text">List of registered user as individual</div>*@
                </div>
            </div>
        </div>
    </div>

}

<div class="row">





    <div class="col-xl-3 col-md-3 col-sm-4 my-2">
        <div id="page-nav" class="sidebar-left page-nav">
            <div data-perfect-scrollbar class="ps">
                <div class="page-section">
                    <h6 class="x-small color-darkblue"><i class="la la-edit font-icon color-secondary align-bottom"></i> Notification Template</h6>
                    <ul class="nav page-nav__menu">
                        <li class="nav-item">
                            <a href="@Url.Action("Create", "EmailTemplates", new { area = "Template"})" class="nav-link">Create Template</a>
                        </li>
                        <li class="nav-item">
                            <a href="@Url.Action("Create", "EmailTemplates", new { area = "Template"})" class="active nav-link">Create Template</a>
                        </li>
                        <li class="nav-item">
                            <a href="@Url.Action("Create", "EmailTemplates", new { area = "Template"})" class="nav-link">Create Template</a>
                        </li>
                    </ul>
                </div>

            </div>
        </div>
    </div>

    <div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="border-form rounded">
                <div class="form-container form-container-w100">
                    <div class="mb-4 mt-2">
                        <h4 class="color-darkblue mb-0">Create : New Notification Template</h4>
                    </div>


                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row">
                        <div class="form-group col-lg-12">
                            <label>@Html.DisplayNameFor(model => model.NotificationType)</label>
                            <div class="col-lg-12 pl-0">
                                @Html.DropDownListFor(model => model.NotificationType, Model.NotificationTypeList, "-Select Notification Type-", htmlAttributes: new { @class = "form-control select2", style = "width: 100%" })
                                @Html.ValidationMessageFor(model => model.NotificationTypeList, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TemplateRefNo, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12 pl-0">
                            @Html.EditorFor(model => model.TemplateRefNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TemplateRefNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TemplateName, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12 pl-0">
                            @Html.EditorFor(model => model.TemplateName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TemplateName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Tick the following checkbox to send notification using the selected medium :")
                    </div>
                    <div class="divTable">
                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.enableWebMessage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.LabelFor(model => model.enableWebMessage, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.enableWebMessage, "", new { @class = "text-danger" })
                        </div>
                        <div id="webBox" class="form-group">
                            @Html.LabelFor(model => model.WebMessage, htmlAttributes: new { @class = "control-label" })
                            <div class="col-md-12 pl-0">
                                @Html.TextAreaFor(model => model.WebMessage, new { @class = "form-control", @maxlength = "100", @style = "max-width 100%" })
                                @Html.ValidationMessageFor(model => model.WebMessage, "", new { @class = "text-danger" })
                                <label class="control-label pull-right" id="WEBtextarea_feedback"></label>
                            </div>
                        </div>
                    </div>

                    <div class="divTable mt-2">
                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.enableSMSMessage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.LabelFor(model => model.enableSMSMessage, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.enableSMSMessage, "", new { @class = "text-danger" })
                        </div>
                        <div id="SMSBox" class="form-group">
                            @Html.LabelFor(model => model.SMSMessage, htmlAttributes: new { @class = "control-label" })
                            <div class="col-md-12 pl-0">
                                @Html.TextAreaFor(model => model.SMSMessage, new { @class = "form-control ", @maxlength = "160", @style = "max-width 100%" })
                                @Html.ValidationMessageFor(model => model.SMSMessage, "", new { @class = "text-danger" })
                                <label class="control-label pull-right" id="SMStextarea_feedback"></label>
                            </div>
                        </div>
                    </div>

                    <div class="divTable mt-2">
                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.enableEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.LabelFor(model => model.enableEmail, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.enableEmail, "", new { @class = "text-danger" })
                        </div>
                        <div id="emailBox" class="panel-body">
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="col-md-12 pl-0">
                                            @Html.LabelFor(model => model.TemplateSubject, htmlAttributes: new { @class = "control-label" })
                                            <button type="button" class="btn btn-sm btn-outline-secondary pull-right" data-toggle="modal" data-target="#myModal">
                                                <i class="fa fa-plus"></i>
                                                Add Parameters
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12 pl-0">
                                    @Html.EditorFor(model => model.TemplateSubject, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TemplateSubject, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="col-md-12 pl-0">
                                            @Html.LabelFor(model => model.TemplateMessage, htmlAttributes: new { @class = "control-label" })
                                            <button type="button" class="btn btn-sm btn-outline-secondary pull-right" data-toggle="modal" data-target="#myModal">
                                                <i class="fa fa-plus"></i>
                                                Add Parameters
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12 pl-0" id="textareaContainer">
                                    @*<div style="transform: scale(0.75); transform-origin: 0 0;">*@
                                    @Html.TextAreaFor(model => model.TemplateMessage, new { @class = "form-control summernote", @id = "summernote", @onfocus = "updateFocus(this)" })
                                    @Html.ValidationMessageFor(model => model.TemplateMessage, "", new { @class = "text-danger" })
                                    @*</div>*@
                                </div>
                            </div>
                        </div>
                    </div>







                </div>
                <div class="p-3 rounded-bottom">
                    <a class="btn btn-default font-weight-normal mr-2" href="href='@Url.Action("List")'">Cancel</a>
                    <button type="submit" class="btn btn-secondary mr-2">Save Template</button>
                    <a class="btn btn-outline-default font-weight-normal" href="#">Preview</a>
                </div>


            </div>

        }
    </div>




</div>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Parameter</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Pick a parameter to add in your template</p>
                <div class="table-responsive">
                    <table class="table tableStyle1 tabledata">
                        <thead>
                            <tr>
                                <th></th>
                                <th>@Html.DisplayNameFor(model => model.TemplateParameterTypeList)</th>
                                <th>@Html.DisplayName("Description")</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.TemplateParameterTypeList)
                            {
                            <tr>
                                <td></td>
                                <td>
                                    <div class="badge badge-info addParam" style="cursor: pointer">
                                        <span class="ml-2 mr-2">
                                            <i class="fa fa-plus-circle fa-1x"></i> &nbsp;
                                                [#@item.TemplateParameterType]
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    @item.parameterDisplayName
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>