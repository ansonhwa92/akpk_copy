@model FEP.Intranet.Areas.eEvent.Models.DetailsPublicEventModel

@{
	ViewBag.Title = "Public Event";
	Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section ContentScript {
	<script type="text/javascript">
		$(document).ready(function () {

			$('#tab_details').click(function () {
				$('#publicevent-details').show();
				$('#amendment-history').hide();
				$('#event-agenda').hide();
			});

			$('#tab_agenda').click(function () {
				$('#publicevent-details').hide();
				$('#amendment-history').hide();
				$('#event-agenda').show();
			});

			$('#tab_history').click(function () {
				$('#publicevent-details').hide();
				$('#amendment-history').show();
				$('#event-agenda').hide();
            });

            //------------------------------------------------------------------
            //generate Agenda
            var weekday = new Array(7);
                weekday[0] = "SUN";
                weekday[1] = "MON";
                weekday[2] = "TUE";
                weekday[3] = "WED";
                weekday[4] = "THU";
                weekday[5] = "FRI";
                weekday[6] = "SAT";
            const monthNames = ["JAN", "FEB", "MAR", "APR", "MAY", "JUNE",
              "JULY", "AUG", "SEPT", "OCT", "NOV", "DEC"
            ];

            var AgendaJSON = JSON.parse('@Html.Raw(Model.TentativeScript)');
            console.log(AgendaJSON);
            var prevDate = "";
            var currentDate = "";
            var DayCounter = 0;
            var tempSegment = "BeforeMorning";
            var toDisplay = '<dl class="row">';
            for (j = 0; j < AgendaJSON['tentatives'].length; j++) {
                currentDate = AgendaJSON['tentatives'][j]['date'];
                if (prevDate != currentDate) {
                    toDisplay += '</dl>';
                    toDisplay += '<hr />';
                    toDisplay += '<dl class="row">';

                    var tempCurrent = currentDate.split('/');
                    var mydate = new Date(tempCurrent[2] + '-' + tempCurrent[1] + '-' + tempCurrent[0]);
                    var dateMark = weekday[mydate.getDay()] + ', ' + mydate.getDate() + ' ' + monthNames[mydate.getMonth()];
                    toDisplay += '<dt class="col-sm-2 p-0"><b><div class="card bg-light p-0 d-flex justify-content-center align-items-center border-grey">' + dateMark + '</div></b></dt>';
                    toDisplay += '<dd class="col-sm-10">';

                    var tempDate = AgendaJSON['tentatives'][j]['date'];
                    var tempSessionName = '';
                    if (AgendaJSON['sessionNames'].length > 0) { let sName = AgendaJSON['sessionNames'].find(s => s.date === tempDate); tempSessionName = (sName != null) ? sName['value'] : ''; }
                    toDisplay += '<h5 class="color-darkblue mb-0">' + tempSessionName + '</h5>';

                    var tempSessionDesc = '';
                    if (AgendaJSON['sessionDescriptions'].length > 0) { let sDesc = AgendaJSON['sessionDescriptions'].find(s => s.date === tempDate); tempSessionDesc = (sDesc != null) ? sDesc['value'] : ''; }
                    toDisplay += '<h6 class="font-weight-normal">' + tempSessionDesc + '</h6>';

                    toDisplay += '</dd>';
                    DayCounter++;
                }

                var daySegment = "Morning";
                var ampm = "am";
                var theHour = parseInt(AgendaJSON['tentatives'][j]['time'].split(':')[0]);
                if (theHour >= 12) {
                    ampm = "pm";
                }
                if (theHour >= 12 && theHour <= 16) { daySegment = "Afternoon"; }
                if (theHour >= 17) { daySegment = "Evening"; }

                    
                if (tempSegment != daySegment) {
                    toDisplay += '<dt class="col-sm-12 m-2"></dt>'; //buffer

                    toDisplay += '<dt class="col-sm-2"></dt>';
                    toDisplay += '<dt class="col-sm-4 color-darkblue"><b>' + daySegment + '</b></dt>';
                    toDisplay += '<dt class="col-sm-6"></dt>';
                    tempSegment = daySegment;
                }

                toDisplay += '<dt class="col-sm-2"></dt>';
                toDisplay += '<dt class="col-sm-2 font-weight-normal">' + AgendaJSON['tentatives'][j]['time'] + ampm + '</dt>';
                toDisplay += '<dt class="col-sm-8 font-weight-normal">' + AgendaJSON['tentatives'][j]['tentative'];
                if (AgendaJSON['tentatives'][j]['speakers'].length > 0) {
                    for (m = 0; m < AgendaJSON['tentatives'][j]['speakers'].length; m++) {
                        toDisplay += '<br><i class="fa fa-user-tie font-icon"></i>' + AgendaJSON['tentatives'][j]['speakers'][m]['name'];
                    }
                }
                toDisplay += '</dt>';

                prevDate = currentDate;
            }
            toDisplay += '</dl>';

            $("#generatedAgenda").html(toDisplay);

            //------------------------------------------------------------------
		});
	</script>
}



@section Nav {

	<div class="title_header">
		<div class="title-header-container">
			<div class="container">
				<!-- if have button -->
				<div class="header-col-right float-right mt-5"><a href='@Url.Action("List", "PublicEvent", new { area = "eEvent"})' class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
				<div class="header-col-left">
					<div id="breadcrumb">
						<nav aria-label="breadcrumb">
							<ol class="breadcrumb">
								<li class="breadcrumb-item"><a href="#">Home</a></li>
								<li class="breadcrumb-item"><a href="#">Event Management</a></li>
								<li class="breadcrumb-item"><a href="#">Manage Public Event</a></li>
								<li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
							</ol>
						</nav>
					</div>
					<h1 class="page-title text-white">Delete Event</h1>
					@*<div class="header-text">List of created event</div>*@
				</div>
			</div>
		</div>
	</div>

}

<h3>Are you sure you want to delete this Event?</h3>

<div class="row">
	<div class="col-xl-3 col-md-3 col-sm-4 my-2">
		<div id="page-nav" class="sidebar-left page-nav">
			<div data-perfect-scrollbar>
				<div class="page-section">
					<h6 class="x-small color-darkblue"><i class="la la-info-circle font-icon color-secondary align-bottom"></i> Request Information</h6>
					<ul class="nav page-nav__menu">
						<li class="nav-item">
							<a id="tab_details" href="#publicevent-details" data-toggle="tab" class="nav-link active">View Public Event Details</a>
						</li>
						<li class="nav-item">
							<a id="tab_agenda" href="#event-agenda" data-toggle="tab" class="nav-link active">Event Agenda</a>
						</li>
						<li class="nav-item">
							<a id="tab_history" href="#amendment-history" data-toggle="tab" class="nav-link active">Amendment History</a>
						</li>
					</ul>
				</div>
			</div>
		</div>
	</div>

	<div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
		<!-- Start Form -->
		<div class="border-form rounded-top">
			<div class="form-container">

				<div class="tab-content">
					<div class="tab-pane active" id="publicevent-details">
						<div class="d-flex align-items-center mb-4 mt-2">
							<h4 class="color-darkblue mr-auto mb-0">Public Event Details<br><span class="small">Review public event details below.</span></h4>
						</div>
						<div class="row">
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.EventTitle)
								@Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control", @placeholder = "Be clear and descriptive", @readonly = "readonly" } })
							</div>
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.EventStatus)
								@{ if (Model.EventStatus == FEP.Model.EventStatus.New)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Draft">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.PendingforVerification)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Pending Verification">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.Verified)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Pending Approval 1">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.RequireAmendment)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Require Amendment">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.VerifiedbyFirstApprover)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Pending Approval 2">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.VerifiedbySecondApprover)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Pending Approval 3">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.Approved)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Approved">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.Cancelled)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Cancelled">
									}
									else if (Model.EventStatus == FEP.Model.EventStatus.Published)
									{
										<input class="form-control bg-warning-ccd" type="text" readonly="readonly" value="Published">
									}

								}
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-12">
								@Html.LabelFor(model => model.EventObjective)
								@Html.EditorFor(model => model.EventObjective, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.StartDate)
								@Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date Start", @disabled = "disabled" } })
							</div>
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.EndDate)
								@Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date End", @disabled = "disabled" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-12">
								@Html.LabelFor(model => model.Venue)
								@Html.EditorFor(model => model.Venue, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelParticipantType)
							</div>
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelFree)
							</div>
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelNormalFee)
							</div>
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelEarlyBirdFee)
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelIndividual)
							</div>
							<div class="form-group col-lg-3">
								<div class="custom-control custom-checkbox">
									@Html.EditorFor(model => model.FreeIndividual, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
									@Html.LabelFor(model => model.FreeIndividual, htmlAttributes: new { @class = "custom-control-label" })
								</div>
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelIndividualPaper)
							</div>
							<div class="form-group col-lg-3">
								<div class="custom-control custom-checkbox">
									@Html.EditorFor(model => model.FreeIndividualPaper, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
									@Html.LabelFor(model => model.FreeIndividualPaper, htmlAttributes: new { @class = "custom-control-label" })
								</div>
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualPaperFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualPaperEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelIndividualPresent)
							</div>
							<div class="form-group col-lg-3">
								<div class="custom-control custom-checkbox">
									@Html.EditorFor(model => model.FreeIndividualPresent, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
									@Html.LabelFor(model => model.FreeIndividualPresent, htmlAttributes: new { @class = "custom-control-label" })
								</div>
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualPresentFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.IndividualPresentEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-3">
								@Html.LabelFor(model => model.LabelAgency)
							</div>
							<div class="form-group col-lg-3">
								<div class="custom-control custom-checkbox">
									@Html.EditorFor(model => model.FreeAgency, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
									@Html.LabelFor(model => model.FreeAgency, htmlAttributes: new { @class = "custom-control-label" })
								</div>
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.AgencyFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
							<div class="form-group col-lg-3">
								@Html.EditorFor(model => model.AgencyEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.ParticipantAllowed)
								@Html.EditorFor(model => model.ParticipantAllowed, new { htmlAttributes = new { @class = "form-control", @placeholder = "0", @readonly = "readonly" } })
							</div>

							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.SeatAllocated_EarlyBird)
								@Html.EditorFor(model => model.SeatAllocated_EarlyBird, new { htmlAttributes = new { @class = "form-control", @placeholder = "0", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.TargetedGroup)
								@Html.EnumDropDownListFor(model => model.TargetedGroup, "-Select Group-", htmlAttributes: new { @class = "form-control select2", style = "width:100%", @disabled = "disabled" })
							</div>

							<div class="form-group col-lg-6">
								@Html.LabelFor(model => model.EventCategoryId)
								@Html.EditorFor(model => model.EventCategoryName, new { htmlAttributes = new { @class = "form-control", @placeholder = "0", @readonly = "readonly" } })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-12">
								@Html.LabelFor(model => model.SpeakerId)
								@Html.ListBoxFor(m => m.SpeakerId, Model.SpeakerList, htmlAttributes: new { @class = "js-example-basic-multiple", style = "width: 100%;", @disabled = "disabled" })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-12">
								@Html.LabelFor(model => model.ExternalExhibitorId)
								@Html.ListBoxFor(m => m.ExternalExhibitorId, Model.ExternalExhibitorList, htmlAttributes: new { @class = "js-example-basic-multiple", style = "width: 100%;", @disabled = "disabled" })
							</div>
						</div>

						<div class="row">
							<div class="form-group col-lg-12">
								@Html.LabelFor(model => model.Attachments)
								@Html.Partial("_AttachmentDetails", Model.Attachments)
							</div>
						</div>
					</div>


                    <div id="event-agenda" class="tab-pane">
                        <div class="mb-4 mt-2 mr-auto">
                            <h4 class="color-darkblue mb-0">Event Agenda</h4>
                            <h6 class="font-weight-normal">Check agenda list here.</h6>
                        </div>
                        <div id="generatedAgenda"></div>
                    </div>

					<div class="tab-pane" id="amendment-history">
						<div class="mb-4 mt-2 mr-auto">
							<h4 class="color-darkblue mb-0">Amendment History</h4>
							<h6 class="font-weight-normal">Check amendment list here.</h6>
						</div>
						<div class="row">
							<div class="form-group col-lg-12">
								<ul class="list-group list-group-fit"></ul>


							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="border-left border-right border-bottom p-3 rounded-bottom">
			@using (Html.BeginForm())
			{
				@Html.AntiForgeryToken()
				@Html.HiddenFor(model => model.Id)

				<a href='@Url.Action("List")' style="text-decoration: none;" class="btn btn-default btn-flat">Cancel</a>
				<button type="submit" class="btn btn-primary">Delete</button>
			}
		</div>

	</div>
</div>
