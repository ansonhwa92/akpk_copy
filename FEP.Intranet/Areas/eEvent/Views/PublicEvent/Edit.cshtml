@model FEP.Intranet.Areas.eEvent.Models.EditPublicEventModel

@{
	ViewBag.Title = "Public Event";
	Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section ContentScript{

	<script type="text/javascript">

		$(document).ready(function () {

			RefreshFile();
            renderAgenda();
            var data = $("#SpeakerId").select2("data");
            var selector = "<select class='js-example-basic-multiple select2-area select2-hidden-accessible' name='tentatifSpeakers' multiple='multiple' data-select2-id='tentatifSpeakers' id='tentatifSpeakers' style='width:100%' aria-hidden='true'>";
            for (i = 0; i < data.length; i++) {
                selector += "<option value='" + data[i].id + "'>" + data[i].text + "</option>";
            }
            selector += "</select>";
            $("#speakerList").html(selector);
            $('.js-example-basic-multiple').select2();
		});

		$("#StartDate").flatpickr({
			dateFormat: "d/m/Y",
			enableTime: false,
			minDate: "today",
			onValueUpdate: function (dObj, dStr, fp, dayElem) {
				debugger;
				$("#EndDate").flatpickr({
					dateFormat: "d/m/Y",
					enableTime: false,
					minDate: dStr,
				});
			}
		});

		$("#EndDate").flatpickr({
			dateFormat: "d/m/Y",
			enableTime: false,
			minDate: "today",
		});

		  $('#FreeIndividual').change(function () {
            if ($('#FreeIndividual').is(':checked')) {
                $('#IndividualFee').val('0.00');
                $('#IndividualFee').prop('readonly', true);

                $('#IndividualEarlyBird').val('0.00');
                $('#IndividualEarlyBird').prop('readonly', true);
            } else {
                $('#IndividualFee').prop('readonly', false);

                $('#IndividualEarlyBird').prop('readonly', false);
            }
        });


        //$('#IndividualPaperFee').prop('readonly', false);
        //$('#IndividualPaperEarlyBird').prop('readonly', false);
        $('#FreeIndividualPaper').change(function () {
            if ($('#FreeIndividualPaper').is(':checked')) {
                $('#IndividualPaperFee').val('0.00');
                $('#IndividualPaperFee').prop('readonly', true);

                $('#IndividualPaperEarlyBird').val('0.00');
                $('#IndividualPaperEarlyBird').prop('readonly', true);
            } else {
                $('#IndividualPaperFee').prop('readonly', false);

                $('#IndividualPaperEarlyBird').prop('readonly', false);
            }
        });


        //$('#IndividualPresentFee').prop('readonly', false);
        //$('#IndividualPresentEarlyBird').prop('readonly', false);
        $('#FreeIndividualPresent').change(function () {
            if ($('#FreeIndividualPresent').is(':checked')) {
                $('#IndividualPresentFee').val('0.00');
                $('#IndividualPresentFee').prop('readonly', true);

                $('#IndividualPresentEarlyBird').val('0.00');
                $('#IndividualPresentEarlyBird').prop('readonly', true);
            } else {
                $('#IndividualPresentFee').prop('readonly', false);

                $('#IndividualPresentEarlyBird').prop('readonly', false);
            }
        });


        //$('#AgencyFee').prop('readonly', false);
        //$('#AgencyEarlyBird').prop('readonly', false);
        $('#FreeAgency').change(function () {
            if ($('#FreeAgency').is(':checked')) {
                $('#AgencyFee').val('0.00');
                $('#AgencyFee').prop('readonly', true);

                $('#AgencyEarlyBird').val('0.00');
                $('#AgencyEarlyBird').prop('readonly', true);
            } else {
                $('#AgencyFee').prop('readonly', false);

                $('#AgencyEarlyBird').prop('readonly', false);
            }
        });

        $("#sideMenuAgenda").click(function () {
            $("#sideMenuDetails").addClass("complete");
            $("#sideMenuDetails").removeClass("active");
            $("#sideMenuAgenda").addClass("active");

            $("#eventdetails").removeClass("active");
            $("#eventagenda").addClass("active");
        });
        $("#sideMenuDetails").click(function () {
            $("#sideMenuDetails").removeClass("complete");
            $("#sideMenuDetails").addClass("active");
            $("#sideMenuAgenda").removeClass("active");

            $("#eventdetails").addClass("active");
            $("#eventagenda").removeClass("active");
        });

        var AgendaJSON = JSON.parse('@Html.Raw(Model.TentativeScript)');

        $("#btnCreateAgenda").click(function () {
            var data = $("#SpeakerId").select2("data");
            var selector = "<select class='js-example-basic-multiple select2-area select2-hidden-accessible' name='tentatifSpeakers' multiple='multiple' data-select2-id='tentatifSpeakers' id='tentatifSpeakers' style='width:100%' aria-hidden='true'>";
            for (i = 0; i < data.length; i++) {
                selector += "<option value='" + data[i].id + "'>" + data[i].text + "</option>";
            }
            selector += "</select>";
            $("#speakerList").html(selector);
            $('.js-example-basic-multiple').select2();
            $("#tentativeTime").val('');
            $("#tentative").val('');
            $("#confirmAddTentative").text("Add");

            $("#tentativeDate").flatpickr({
                dateFormat: "d/m/Y",
                enableTime: false,
                minDate: $("#StartDate").val(),
                maxDate: $("#EndDate").val()

            });

            ActionMode = "AddNew";
            $('#myModal').modal('show');

        });

        function editTentative(tId) {
            for (j = 0; j < AgendaJSON['tentatives'].length; j++) {
                if (AgendaJSON['tentatives'][j]['id'] == tId) {
                    $("#tentativeDate").val(AgendaJSON['tentatives'][j]['date']),
                        $("#tentativeTime").val(AgendaJSON['tentatives'][j]['time']);
                    $("#tentative").val(AgendaJSON['tentatives'][j]['tentative']);
                    $("#tentativeId").val(AgendaJSON['tentatives'][j]['id'])
                    var preselectedSpeaker = [];
                    for (i = 0; i < AgendaJSON['tentatives'][j]['speakers'].length; i++) {
                        preselectedSpeaker.push(AgendaJSON['tentatives'][j]['speakers'][i]['id']);
                    }
                    $("#tentatifSpeakers").val(preselectedSpeaker).trigger("change");
                    $("#confirmAddTentative").text("Update");
                    ActionMode = "UpdateTentative";
                    $('#myModal').modal('show');
                    break;
                }
            }

        }

        function deleteTentative(tId) {
            for (j = 0; j < AgendaJSON['tentatives'].length; j++) {
                if (AgendaJSON['tentatives'][j]['id'] == tId) {
                    //debugger;
                    if (confirm('Are you sure to delete this entry? \n' + AgendaJSON['tentatives'][j]['date'] + ' ' + AgendaJSON['tentatives'][j]['time'] + '\n' + AgendaJSON['tentatives'][j]['tentative'])) {
                        console.log(AgendaJSON);
                        AgendaJSON['tentatives'].splice(j, 1);
                        console.log(AgendaJSON);
                        renderAgenda();
                    } else {

                    }

                    break;
                }
            }

        }


        function renderAgenda() {
            var prevDate = "";
            var currentDate = "";
            var DayCounter = 0;
            var toDisplay = '<dl class="row">';
            for (j = 0; j < AgendaJSON['tentatives'].length; j++) {
                currentDate = AgendaJSON['tentatives'][j]['date'];
                if (prevDate != currentDate) {
                    toDisplay += '</dl>';
                    toDisplay += '<hr />';
                    toDisplay += '<dl class="row">';
                    toDisplay += '<dt class="col-sm-3"><b><div class="card bg-light p-2 float-right border-grey">' + AgendaJSON['tentatives'][j]['date'] + '</div></b></dt>';
                    toDisplay += '<dd class="col-sm-9">';
                    toDisplay += '<div class="form-group col-lg-12">';
                    toDisplay += '<label for="Event_Description">Session Name</label>';
                    toDisplay += '<input class="form-control text-box single-line" data-val="true"';

                    var tempDate = AgendaJSON['tentatives'][j]['date'];
                    var tempSessionName = '';
                    if (AgendaJSON['sessionNames'].length > 0) { let sName = AgendaJSON['sessionNames'].find(s => s.date === tempDate); tempSessionName = (sName != null) ? sName['value'] : ''; }
                    toDisplay += 'id="sessionName_' + DayCounter + '" name="sessionName_' + DayCounter + '" placeholder="Session ' + (DayCounter + 1) + '" type="text" onchange="(AgendaJSON[\'sessionNames\'].find(s => s.date === \''+ tempDate +'\') == null)? AgendaJSON[\'sessionNames\'].push({date: \''+ tempDate +'\', value: this.value}) : (AgendaJSON[\'sessionNames\'].find(s => s.date === \''+ tempDate +'\'))[\'value\'] = this.value;" value="' + tempSessionName + '">';
                    toDisplay += '</div>';
                    toDisplay += '<div class="form-group col-lg-12">';
                    toDisplay += '<label for="Session_Description">Event Description</label>';
                    toDisplay += '<input class="form-control text-box single-line" data-val="true"';
                    var tempSessionDesc = '';
                    if (AgendaJSON['sessionDescriptions'].length > 0) { let sDesc = AgendaJSON['sessionDescriptions'].find(s => s.date === tempDate); tempSessionDesc = (sDesc != null )? sDesc['value'] : ''; }
                    toDisplay += 'id="sessionDescription_' + DayCounter + '" name="sessionDescription_' + DayCounter + '" placeholder="describe about Session ' + (DayCounter+1) + '" type="text" onchange="(AgendaJSON[\'sessionDescriptions\'].find(s => s.date === \''+ tempDate +'\') == null)? AgendaJSON[\'sessionDescriptions\'].push({date: \''+ tempDate +'\', value: this.value})  : (AgendaJSON[\'sessionDescriptions\'].find(s => s.date === \''+ tempDate +'\'))[\'value\'] = this.value;" value="' + tempSessionDesc + '">';
                    toDisplay += '</div>';
                    toDisplay += '</dd>';
                    DayCounter++;
                }

                toDisplay += '<dt class="col-sm-3"><p class="text-right">' + AgendaJSON['tentatives'][j]['time'] + '</p></dt>';
                toDisplay += '<dd class="col-sm-9">' + AgendaJSON['tentatives'][j]['tentative'];
                toDisplay += '<a href="#" data-toggle="tooltip" data-placement="top" data-original-title="Edit" onclick="editTentative(' + AgendaJSON['tentatives'][j]['id'] + ')"> <i class="la la-edit text-muted"></i></a>';
                toDisplay += '<a href="#" data-toggle="tooltip" data-placement="top" data-original-title="Delete" onclick="deleteTentative(' + AgendaJSON['tentatives'][j]['id'] + ')"> <i class="la la-trash text-muted"></i></a>';
                if (AgendaJSON['tentatives'][j]['speakers'].length > 0) {
                    for (m = 0; m < AgendaJSON['tentatives'][j]['speakers'].length; m++) {
                        toDisplay += '<br><i class="fa fa-user-tie font-icon"></i>' + AgendaJSON['tentatives'][j]['speakers'][m]['name'];
                    }
                }
                toDisplay += '</dd>';

                prevDate = currentDate;
            }
            toDisplay += '</dl>';

            $("#generatedAgenda").html(toDisplay);
        }

        var tCounter = 0;
        $("#confirmAddTentative").click(function () {

            var dataSpeaker = $("#tentatifSpeakers").select2("data");
            var item = {
                "id": 0,
                "date": $("#tentativeDate").val(),
                "time": $("#tentativeTime").val(),
                "tentative": $("#tentative").val(),
                "speakers": []
            }
            for (k = 0; k < dataSpeaker.length; k++) {
                var eachSpeaker = {
                    "id": dataSpeaker[k].id,
                    "name": dataSpeaker[k].text
                }
                item['speakers'].push(eachSpeaker);
            }
            if ($("#tentativeDate").val() != "" && $("#tentativeTime").val() != "" && $("#tentative").val() != "") {
                if (ActionMode == "AddNew") {

                    //check if same time already exist
                    for (var m = 0; m < AgendaJSON['tentatives'].length; m++) {
                        if (AgendaJSON['tentatives'][m]['date'] == item['date']) {
                            if (AgendaJSON['tentatives'][m]['time'] == item['time']) {
                                alert("There is a tentative with the same time already exist.\nPlease select different time");
                                return;
                            }
                        }
                    }

                    item['id'] = tCounter;
                    tCounter++;
                    AgendaJSON['tentatives'].push(item);
                }
                if (ActionMode == "UpdateTentative") {
                    item['id'] = $("#tentativeId").val();
                    for (m = 0; m < AgendaJSON['tentatives'].length; m++) {
                        if (AgendaJSON['tentatives'][j]['id'] == $("#tentativeId").val()) {

                            //check if same time already exist
                            for (var m = 0; m < AgendaJSON['tentatives'].length; m++) {
                                if (AgendaJSON['tentatives'][m]['date'] == item['date']) {
                                    if (AgendaJSON['tentatives'][m]['id'] != item['id'] && AgendaJSON['tentatives'][m]['time'] == item['time']) {
                                        alert("There is a tentative with the same time already exist.\nPlease select different time");
                                        return;
                                    }
                                }
                            }

                            AgendaJSON['tentatives'][j] = item;
                            break;
                        }
                    }
                }

                 function sortByProperty(property1, property2) {
                    return function (a, b) {
                        /*if (a[property] > b[property])
                            return 1;
                        else if (a[property] < b[property])
                            return -1;

                        return 0;*/

                        if (a[property1] === b[property1]) {
                             // Price is only important when cities are the same
                            return a[property2] > b[property2] ? 1 : -1;
                        }
                        return a[property1] > b[property1] ? 1 : -1;
                    }
                }
                AgendaJSON['tentatives'].sort(sortByProperty("date","time"));
                console.log(AgendaJSON);

                renderAgenda();
                $('#myModal').modal('hide');
            }
            else {
                alert("Please complete all required fields");
            }


        });

        $('#target').submit(function(event) {

            event.preventDefault(); //this will prevent the default submit
            // your code here (But not asynchronous code such as Ajax because it does not wait for response and move to next line.)
            $("#TentativeScript").val(JSON.stringify(AgendaJSON));

            $(this).unbind('submit').submit(); // continue the submit unbind preventDefault
        })
	</script>

}

@section Nav {

	<div class="title_header">
		<div class="title-header-container">
			<div class="container">
				<!-- if have button -->
				<div class="header-col-right float-right mt-5"><a href='@Url.Action("List", "PublicEvent", new { area = "eEvent"})' class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
				<div class="header-col-left">
					<div id="breadcrumb">
						<nav aria-label="breadcrumb">
							<ol class="breadcrumb">
								<li class="breadcrumb-item"><a href="#">Home</a></li>
								<li class="breadcrumb-item"><a href="#">Event Management</a></li>
								<li class="breadcrumb-item"><a href="#">Manage Public Event</a></li>								
								<li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
							</ol>
						</nav>
					</div>
					<h1 class="page-title text-white">Public Event Request Ref No: @Model.RefNo</h1>
					<h1 class="page-title text-white">Edit Event</h1>

					@*<div class="header-text">List of created event</div>*@
				</div>
			</div>
		</div>
	</div>

}

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "target" }))
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	@Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.origin)
	@Html.HiddenFor(model => model.EventStatus)
	@Html.HiddenFor(model => model.EventCategoryId)
	@Html.HiddenFor(model => model.RefNo)

	<div class="row">
		<div class="col-xl-3 col-md-3 col-sm-4 my-2">
			<div class="sidebar-left">
				<!-- Steps -->
				<div class="sidebar-inner sticky">
					<ul class="steps steps-vertical">

						<li class="step-item complete">
							<a href="" class="step-link">
								<span class="step-number">1</span>
								<span class="step-title">List Of Event</span>
							</a>
						</li>

						<li id="sideMenuDetails" class="step-item rejected">
							<a href="#eventdetails" class="step-link">
								<span class="step-number">2</span>
								<span class="step-title">Fill Up Event Details</span>
							</a>
						</li>
						<li id="sideMenuAgenda" class="step-item">
							<a href="#eventagenda" class="step-link">
								<span class="step-number">3</span>
								<span class="step-title">Fill Up Event Agenda</span>
							</a>
						</li>
					</ul>
					<!-- End Steps -->
				</div>
			</div>
		</div>


		<div class="col-xl-9 col-md-9 col-sm-8 mt-2 pb-5">
			<!-- Start Form -->
			<div class="border-form rounded-top">
                <div class="form-container tab-content">
                    <div class="tab-pane active" id="eventdetails">
                            <div class="mt-2 mb-4 pb-1">
                                <h4 class="color-darkblue mb-0">Event Details</h4>
                                <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.EventCategoryId)
                                    @Html.DropDownListFor(model => model.EventCategoryId, Model.CategoryList, "-Select Category-", htmlAttributes: new { @class = "form-control select2", style = "width: 100%" })
                                    @Html.ValidationMessageFor(model => model.EventCategoryId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.EventTitle)
                                    @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control", @placeholder = "Be clear and descriptive" } })
                                    @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.EventObjective)
                                    @Html.EditorFor(model => model.EventObjective, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EventObjective, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-6">
                                    @Html.FEPLabelFor(model => model.StartDate)
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date Start" } })
                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-lg-6">
                                    @Html.FEPLabelFor(model => model.EndDate)
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date End" } })
                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.Venue)
                                    @Html.EditorFor(model => model.Venue, new { htmlAttributes = new { @class = "form-control", @placeholder = "Be clear and descriptive" } })
                                    @Html.ValidationMessageFor(model => model.Venue, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelParticipantType)
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelFree)
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelNormalFee)
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelEarlyBirdFee)
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelIndividual)
                                </div>
                                <div class="form-group col-lg-3">
                                    <div class="custom-control custom-checkbox">
                                        @Html.EditorFor(model => model.FreeIndividual, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                        @Html.LabelFor(model => model.FreeIndividual, htmlAttributes: new { @class = "custom-control-label" })
                                    </div>
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualFee, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualEarlyBird, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelIndividualPaper)
                                </div>
                                <div class="form-group col-lg-3">
                                    <div class="custom-control custom-checkbox">
                                        @Html.EditorFor(model => model.FreeIndividualPaper, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                        @Html.LabelFor(model => model.FreeIndividualPaper, htmlAttributes: new { @class = "custom-control-label" })
                                    </div>
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualPaperFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualPaperFee, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualPaperEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualPaperEarlyBird, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelIndividualPresent)
                                </div>
                                <div class="form-group col-lg-3">
                                    <div class="custom-control custom-checkbox">
                                        @Html.EditorFor(model => model.FreeIndividualPresent, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                        @Html.LabelFor(model => model.FreeIndividualPresent, htmlAttributes: new { @class = "custom-control-label" })
                                    </div>
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualPresentFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualPresentFee, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.IndividualPresentEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.IndividualPresentEarlyBird, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    @Html.LabelFor(model => model.LabelAgency)
                                </div>
                                <div class="form-group col-lg-3">
                                    <div class="custom-control custom-checkbox">
                                        @Html.EditorFor(model => model.FreeAgency, new { htmlAttributes = new { @class = "custom-control-input js-check-selected-row" } })
                                        @Html.LabelFor(model => model.FreeAgency, htmlAttributes: new { @class = "custom-control-label" })
                                    </div>
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.AgencyFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.AgencyFee, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-lg-3">
                                    @Html.EditorFor(model => model.AgencyEarlyBird, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.AgencyEarlyBird, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @*<div class="row">
                    <div class="form-group col-lg-12">
                        @Html.FEPLabelFor(model => model.Fee)
                        @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                        @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.ParticipantAllowed)
                                    @Html.EditorFor(model => model.ParticipantAllowed, new { htmlAttributes = new { @class = "form-control", @placeholder = "0" } })
                                    @Html.ValidationMessageFor(model => model.ParticipantAllowed, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.TargetedGroup)
                                    @Html.EnumDropDownListFor(model => model.TargetedGroup, "-Select Group-", htmlAttributes: new { @class = "form-control select2", style = "width:100%" })
                                    @Html.ValidationMessageFor(model => model.TargetedGroup, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.ExternalExhibitorId)
                                    @Html.ListBoxFor(m => m.ExternalExhibitorId, Model.ExternalExhibitorList, htmlAttributes: new { @class = "js-example-basic-multiple", style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.ExternalExhibitorId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.SpeakerId)
                                    @Html.ListBoxFor(m => m.SpeakerId, Model.SpeakerList, htmlAttributes: new { @class = "js-example-basic-multiple", style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.SpeakerId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-lg-12">
                                    @Html.FEPLabelFor(model => model.Attachments)
                                    @Html.Partial("_Attachment", Model.Attachments)
                                    @Html.ValidationMessageFor(model => model.Attachments, "", new { @class = "text-danger" })
                                </div>
                            </div>
                    </div>
                    
                    <div class="tab-pane" id="eventagenda">
                        <div class="mt-2 mb-4 pb-1 mr-auto">
                            <h4 class="color-darkblue mb-0">Event Agenda</h4>
                            <h6 class="font-weight-normal">Information marked with (<span class="text-danger">*</span>) is mandatory.</h6>
                        </div>

                        <div class="row">
                            <div class="form-group col-lg-12">
                                @Html.HiddenFor(m => m.TentativeScript)
                                <button type="button" class="btn btn-secondary pull-right" id="btnCreateAgenda">
                                    <i class="la la-plus font-icon"></i>
                                    Add Tentatives
                                </button>
                            </div>
                        </div>

                        <div id="generatedAgenda"></div>


                    </div>

                    <div class="border-left border-right border-bottom p-3 rounded-bottom">
                        <a href='@Url.Action("List")' class="btn btn-warning btn-flat">Cancel</a>
                        <button type="submit" class="btn btn-primary btn-flat">Save</button>
                    </div>
                </div>

		</div>

	</div>
    </div>


	<!-- Modal -->
	<div class="modal fade" id="myModal" role="dialog">
		<div class="modal-dialog modal-sm">

			<!-- Modal content-->
			<div class="modal-content">
				<div class="modal-header">
					<div class="mr-auto">
						<h4 class="color-darkblue mb-0">Event Agenda</h4>
						<h6 class="font-weight-normal">Add tentatives for the program</h6>
					</div>
					<button type="button" class="close" data-dismiss="modal">&times;</button>
					<input type="hidden" id="tentativeId" name="tentativeId" value="" />
				</div>
				<div class="modal-body">
					<div class="row">
						<div class="form-group col-lg-12">
							@Html.Label("Date")<span class="text-danger"> *</span>
							<input class="form-control text-box single-line flatpickr-input active"
								   data-val="true" data-val-date="The field must be a date."
								   data-val-required="Please Insert Date"
								   id="tentativeDate" name="tentativeDate" placeholder="Select Date"
								   type="text" value="" readonly="readonly">
						</div>
					</div>
					<div class="row">
						<div class="form-group col-lg-12">
							@Html.Label("Time")<span class="text-danger"> *</span>
							<input class="form-control timeSelect text-box single-line flatpickr-input active valid" data-val="true"
								   data-val-required="Please insert Start Time"
								   id="tentativeTime" name="tentativeTime" placeholder="Time"
								   type="text" value="" readonly="readonly" aria-describedby="StartTime-error" aria-invalid="false">
						</div>
					</div>
					<div class="row">
						<div class="form-group col-lg-12">
							@Html.Label("Tentative")<span class="text-danger"> *</span>
							<input class="form-control text-box single-line" data-val="true"
								   data-val-required="Please Insert Tentative" id="tentative" name="tentative" placeholder="arrival" type="text" value="">
						</div>
					</div>
					<div class="row">
						<div class="form-group col-lg-12">
							@Html.Label("Speaker(s)")
							<div id="speakerList"></div>
						</div>
					</div>

				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-primary" id="confirmAddTentative">Add</button>
				</div>
			</div>

		</div>
	</div>
}
