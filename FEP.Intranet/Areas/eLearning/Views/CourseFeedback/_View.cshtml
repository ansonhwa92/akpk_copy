@model FeedbackModel

@{
    Layout = null;
    //Layout = "~/Views/Shared/_Layout1.cshtml";
    //  int feedbackId = ViewBag.FeedbackId;
    //bool editEnable = CurrentUser.HasAccess(UserAccess.CourseGroupEdit);
    //var toDisplay = Model;
    //if (!editEnable)
    //{
    //    if (toDisplay.Count > 0)
    //    {
    //        //toDisplay = toDisplay.Where(m => m.isOwner || m.isMember).ToList();
    //    }
    //}
}
<style>
    .talk-bubble {
        margin: 40px;
        display: inline-block;
        position: relative;
        width: 770px;
        height: auto;
        background-color: lightblue;
    }

    .border {
        border: 8px solid lightblue;
    }

    .round {
        border-radius: 15px;
        -webkit-border-radius: 15px;
        -moz-border-radius: 15px;
    }

    .tri-right.border.left-in:before {
        content: ' ';
        position: absolute;
        width: 0;
        height: 0;
        left: -40px;
        right: auto;
        top: 30px;
        bottom: auto;
        border: 20px solid;
        border-color: lightblue lightblue transparent transparent;
    }

    .tri-right.left-in:after {
        content: ' ';
        position: absolute;
        width: 0;
        height: 0;
        left: -20px;
        right: auto;
        top: 38px;
        bottom: auto;
        border: 12px solid;
        border-color: lightblue lightblue transparent transparent;
    }

    /* talk bubble contents */
    .talktext {
        padding: 1em;
        text-align: left;
        line-height: 1.5em;
    }

        .talktext p {
            /* remove webkit p margins */
            -webkit-margin-before: 0em;
            -webkit-margin-after: 0em;
        }

    .MakeWide {
        width: 300px;
    }

    .MakeHi {
        height: 50px;
    }
</style>
@*@using (Html.BeginForm("Create", "CourseFeedback", null, FormMethod.Post, new { id = "formAdd", enctype = "multipart/form-data" }))
    {*@
@*<div class="form-group">
        <div class="custom-control custom-checkbox">
            <input id="customCheck01" type="checkbox" class="custom-control-input">
            <label for="customCheck01" class="custom-control-label">Enable Feedback</label>
        </div>
    </div>*@
@*<form action="@BaseURL/eLearning/CourseFeedback/_View" method="post" enctype="multipart/form-data" onsubmit="return validateForm()" id="FeedbackFrom">*@
@*@using (Html.BeginForm())*@
@using (Ajax.BeginForm("_View", "CourseFeedback", new AjaxOptions
{
    HttpMethod = "POST",
    OnSuccess = "onAjaxRequestSuccess"
},
new { @id = "AjaxDARid", @class = "form-horizontal", role = "form" }
))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(m => m.id)
    @Html.HiddenFor(m => m.NewPost.UserId, new { Value = CurrentUser.UserId })
    @Html.HiddenFor(m => m.NewPost.FeedbackId, new { Value = Model.id })
    <div class="border-form rounded-top "  style="margin:10px;">
        @if (!String.IsNullOrEmpty(CurrentUser.Avatar))
        {
            <img src="@BaseURL/img/avatar/@CurrentUser.Avatar" alt="Avatar" class="rounded-cir rounded-color" width="55"  style="margin-left:25px;">
            // <img src="@BaseURL/img/avatar/@CurrentUser.Avatar" alt="Avatar" class="rounded-circle rounded-color" width="40">
        }
        else
        {
            <img src="@BaseURL/img/no-photo.jpg" alt="Avatar" class="rounded-circle rounded-color" width="40"  style="margin:10px;">
        }

        <div class="col-lg-10 talk-bubble  border round tri-right left-in">
            <div class="talktext">
                <div class="widget-subtitle">Ingin bertanya? Sila tinggalkan pertanyaan anda di sini (Jika ada)</div>
                <div class="form-container">
                    <div class="form-group">
                        <div class="">
                            @Html.TextAreaFor(m => m.NewPost.Post, new { @class = "editor form-control" })
                            @Html.ValidationMessageFor(m => m.NewPost.Post, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="">
                        <div class="">
                            @Html.DropDownListFor(m => m.NewPost.Visibility, Model.Visibilities, htmlAttributes: new { @class = "MakeWide MakeHi" })
                            @Html.ValidationMessageFor(m => m.NewPost.Visibility)

                            <button type="submit" class="btn btn-default pull-right" id="btnFeedbackSubmit" name="SubmitType" value="@Model.id">
                                <i class="la la-save font-icon" style="font-size: 1.5rem;"></i>Submit Feedback
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*</form>*@

<div class="border-form rounded-top">

    <div class="row" data-toggle="dragula">

        @if (Model.Children != null)
        {
            if (Model.Children.Count > 0)
            {
                foreach (var x in Model.Children.Where(m => m.Visibility == 1))
                {
                    if (CurrentUser.HasAccess(UserAccess.CourseFeedbackView) || (CurrentUser.UserId.Value == x.UserId))
                    {
                        <div class="col-sm-6 col-md-4" style="margin: 0px;">
                            <div class="card card-sm">
                                <div class="position-relative" style="margin: 5px;">
                                    @*<div class="card-img-top">
                                            <img src="assets/images/stories/256_rsz_phil-hearing-769014-unsplash.jpg" class="card-img-top" alt="">
                                        </div>*@
                                    <div class="card-body avatar-group">
                                        <div class="avatar avatar-xs " style="margin-right:35px;">
                                            <a href="">
                                                @if (!String.IsNullOrEmpty(x.Avatar))
                                                {
                                                    <img src="@BaseURL/img/avatar/@x.Avatar" alt="Avatar" class="rounded-circle rounded-color" width="50">
                                                }
                                                else
                                                {
                                                    <img src="@BaseURL/img/no-photo.jpg" alt="Avatar" class="card-img-top" width="50">
                                                }
                                            </a>

                                        </div>
                                        @if (@x.Updated.HasValue)
                                        {
                                            <small class="text-muted">
                                                @x.Name <br /> Edited on @x.Updated

                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">
                                                @x.Name <br /> Posted on @x.Created
                                            </small>
                                        }

                                    </div>

                                </div>
                                <div class="card-body d-flex">
                                    <div class="flex">
                                        <div class="flex">
                                            @Html.Raw(@x.Post)
                                        </div>
                                    </div>
                                    @*<a href="" class="text-muted"><i class="material-icons">more_vert</i></a>*@

                                </div>
                                @if (CurrentUser.HasAccess(UserAccess.CourseFeedbackPostDelete) || (CurrentUser.UserId.Value == x.UserId))
                                {
                                    <div class="text-lg-right ">
                                        <button onclick="deletethispost(@x.Id);" class="page-link" style="border: none;outline:none;display:inline;" id="show_hide_bt">
                                            <i class="la la-trash-o"></i>
                                        </button>
                                        @*  <i class="la la-trash-o text-lg-right text-muted" onclick="editthispost(@x.Id)"></i>*@
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }

                foreach (var x in Model.Children.Where(m => m.Visibility == 2))
                {
                    <div class="col-sm-6 col-md-4" style="margin: 0px;">
                        <div class="card card-sm">
                            <div class="position-relative" style="margin: 5px;">
                                @*<div class="card-img-top">
                                        <img src="assets/images/stories/256_rsz_phil-hearing-769014-unsplash.jpg" class="card-img-top" alt="">
                                    </div>*@
                                <div class="card-body avatar-group">
                                    <div class="avatar avatar-xs " style="margin-right:35px;">
                                        <a href="">
                                            @if (!String.IsNullOrEmpty(x.Avatar))
                                            {
                                                <img src="@BaseURL/img/avatar/@x.Avatar" alt="Avatar" class="rounded-circle rounded-color" width="50">
                                            }
                                            else
                                            {
                                                <img src="@BaseURL/img/no-photo.jpg" alt="Avatar" class="card-img-top" width="50">
                                            }
                                        </a>

                                    </div>
                                    @if (@x.Updated.HasValue)
                                    {
                                        <small class="text-muted">
                                            @x.Name <br /> Edited on @x.Updated

                                        </small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">
                                            @x.Name <br /> Posted on @x.Created
                                        </small>
                                    }

                                </div>

                            </div>
                            <div class="card-body d-flex">
                                <div class="flex">
                                    <div class="flex">
                                        @Html.Raw(@x.Post)
                                    </div>
                                </div>
                                @*<a href="" class="text-muted"><i class="material-icons">more_vert</i></a>*@

                            </div>
                            @if (CurrentUser.HasAccess(UserAccess.CourseFeedbackPostDelete) || (CurrentUser.UserId.Value == x.UserId))
                            {
                                <div class="text-lg-right ">
                                    <button onclick="deletethispost(@x.Id);" class="page-link" style="border: none;outline:none;display:inline;" id="show_hide_bt">
                                        <i class="la la-trash-o"></i>
                                    </button>
                                    @*  <i class="la la-trash-o text-lg-right text-muted" onclick="editthispost(@x.Id)"></i>*@
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        }



    </div>

</div>

@*}*@
@section ContentScript
{
    @*<link href="~/css/elearn.css" rel="stylesheet" />*@
    @*<link href="~/Scripts/summernote/summernote-lite.css" rel="stylesheet" />*@
    @*<script src="~/Scripts/summernote/summernote-lite.min.js"></script>*@
    @*<script src="~/js/elearn.js"></script>*@
    @*<script src="~/js/elearn-course.js"></script>*@
    @*<script src="~/Scripts/tinymce/tinymce.min.js"></script>*@
    @*<script type="text/javascript" src="~/js/tinymce_cfg.js" id="tmscript" baseUrl="@(BaseURL)"></script>*@
    <script>

         @*$(document).ready(function () {
        $('#FeedbackFrom').submit(function () {
            alert("Sukses");
            if ($(this).valid()) {
                $.ajax({
                    url: '@BaseURL/eLearning/CourseFeedback/_View',
                    type: "post",
                    data: $(this).serialize(),
                    success: function (result) {
                        alert("Sukses");
                        location.reload();
                    }
                });
            }
            return false;
        });
    });*@


       



    </script>
    @*<script>
            tinymce.init({
                selector: '#FeedBackCloud'
            });
        </script>*@
    @*<script>
            var uploadImgUrl = '@(BaseURL)/eLearning/File/UploadFile';
            var getImgUrl = '@(BaseURL)/eLearning/File/GetImg/?fileName=';


           // var uploadDocUrl = '@(WebApiURL)/eLearning/File/';
            var uploadDocUrl = '@(BaseURL)/eLearning/File/UploadFile';
            var convertFileUrl = '@(BaseURL)eLearning/File/DocToHTML';
            $(document).ready(function () {
                    tinymce.init({
                        selector: '.FeedBackCloud',
                    plugins: 'print preview fullpage paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',
                    imagetools_cors_hosts: ['picsum.photos'],
                    menubar: 'file edit view insert format tools table help',
                    toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview print | insertfile image media link anchor codesample | ltr rtl',
                    toolbar_sticky: true,
                    autosave_ask_before_unload: true,
                    autosave_interval: "30s",
                    autosave_prefix: "{path}{query}-{id}-",
                    autosave_restore_when_empty: false,
                    autosave_retention: "2m",
                    image_advtab: true,
                    branding: false,

                    importcss_append: true,
                    file_picker_types: 'file image media',
                    file_picker_callback: function (callback, value, meta) {
                        /* Provide file and text for the link dialog */
                        if (meta.filetype === 'file') {
                            callback('https://www.google.com/logos/google.jpg', { text: 'My text' });
                        }

                        /* Provide image and alt text for the image dialog */
                        if (meta.filetype === 'image') {
                            callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });
                        }

                        /* Provide alternative source and posted for the media dialog */
                        if (meta.filetype === 'media') {
                            // callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });

                            // Trigger click on file element
                            jQuery("#fileupload").trigger("click");
                            $("#fileupload").unbind('change');
                            // File selection
                            jQuery("#fileupload").on("change", function () {
                                var file = this.files[0];
                                var reader = new FileReader();

                                // FormData
                                var fd = new FormData();
                                var files = file;
                                fd.append("file", files);
                                fd.append('filetype', meta.filetype);

                                var filename = "";

                                // AJAX
                                var url = '@BaseURL/elearning/File/EditorUpload';
                                //console.log('url - ', url);

                                jQuery.ajax({
                                    url: url,
                                    type: "post",
                                    data: fd,
                                    contentType: false,
                                    processData: false,
                                    async: false,
                                    success: function (response) {
                                        //console.log('filename-', response);
                                        filename = response.location;
                                        alert(response.location);
                                    }
                                });

                                reader.onload = function (e) {
                                    callback(filename);
                                };
                                reader.readAsDataURL(file);
                            });
                        }
                    },

                    width: 720,
                    height: 240,
                    image_caption: true,
                    quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
                    noneditable_noneditable_class: "mceNonEditable",
                    toolbar_drawer: 'sliding',
                    contextmenu: "link image imagetools table",
                    images_upload_url: '@BaseURL/elearning/File/EditorUpload',
                    images_upload_base_path: '@BaseURL/eLearning',
                    images_upload_credentials: true,
                    relative_urls: false,
                    remove_script_host: false,
                    convert_urls: true,

                    init_instance_callback: function (editor) {

                        editor.on('BeforeSetContent', function (e) {
                            //console.log(e.content);

                            if (e.content.indexOf("video ") > 0) {
                                if (e.content.indexOf(".pdf") > 0) {
                                    e.content = e.content.replace("<video", "<div");

                                    var width = e.content.match("width=\"(.*)\" height");
                                    var height = e.content.match("height=\"(.*)\" controls");
                                    //console.log('width - ', width, ' height - ', height);

                                    e.content = e.content.replace("controls=\"controls\"", "");

                                    e.content = e.content.replace("<source", "<object");
                                    e.content = e.content.replace("src=", "data=");
                                    //console.log('middle - ', e.content);

                                    e.content = e.content.replace("</video", "</div");
                                    e.content = e.content.replace("/>", "type=\"application/pdf\" width=\"" + width[1] + "\" height=\"" + height[1] + "\"  ></object>");
                                }

                                //console.log('after - ', e.content);
                            }
                        });
                    },
                });
            });
        </script>*@
}
