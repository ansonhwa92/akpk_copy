@using FEP.Model
@using FEP.Model.eLearning

@model FEP.WebApiModel.eLearning.ReturnListCourseModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section Nav{
    <div class="title_header">
        <div class="title-header-container">
            <div class="container">
                <!-- if have button -->
                <div class="header-col-right float-right mt-5"><a href="~/eLearning/Home" class="btn btn-outline-primary text-white"><span class="align-middle"><i class="la la-long-arrow-left">&nbsp;</i></span> Back</a></div>
                <div class="header-col-left">
                    <div id="breadcrumb">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="~/Home">Home</a></li>
                                <li class="breadcrumb-item"><a href="~/eLearning/Home">eLearning</a></li>
                                <li class="breadcrumb-item"><a href="#">Courses</a></li>
                                <li class="breadcrumb-item active" aria-current="page"><a href="#"></a></li>
                            </ol>
                        </nav>
                    </div>
                    <h1 class="page-title text-white">List of Courses</h1>
                    <div class="header-text">Create, edit, delete and manage courses.</div>
                </div>
            </div>
        </div>
    </div>
}

<div class="d-flex align-items-center">
    <div class="filter dropdown">
        <button class="btn btn-default btn-rounded color-grey font-weight-normal cycle-element"><i class="la la-sliders font-icon color-secondary"></i>Filters</button>
        <div class="dropdown-menu">
            <div class="filter-head">Filters</div>
            <div class="filter-body">

                <div>@Html.DisplayNameFor(m => m.Filters.Code) </div>
                <div class="sorting-wrap">
                    <div class="sorting-dropdown">
                        @Html.EditorFor(m => m.Filters.Code, new { htmlAttributes = new { @class = "form-control small" } })
                    </div>
                </div>
                <div>@Html.DisplayNameFor(m => m.Filters.Title)</div>
                <div class="sorting-wrap">
                    <div class="sorting-dropdown">
                        @Html.EditorFor(m => m.Filters.Title, new { htmlAttributes = new { @class = "form-control small" } })
                    </div>
                </div>
                <div>
                    <button id="btnSearch" class="btn btn-secondary">Search</button>
                </div>
            </div>
        </div>
    </div>
    <div class="divider-vertical">&nbsp;</div>
    <!-- Search -->
    <div class="input-keyword col-lg-5 col-sm-12 mr-auto px-0">
        <input id="quickSearch" type="text" class="form-control form-control-rounded" placeholder="Search" name="keyword">
        <div class="input-group-append">
            <button id="quickSearchBtn" class="btn btn-circle" type="button"><i class="fas fa-search text-white"></i></button>
        </div>
    </div>
    @*<div class="sorting-wrap">
            <div class="sorting-dropdown">
                <select class="select2 form-control small" name="sorting">
                    <option value="Default Sorting">Default Sorting</option>
                    <option value="sorting 1">Sorting 1</option>
                    <option value="sorting 2">Sorting 2</option>
                </select>
            </div>
        </div>*@
</div>
<hr>
<div class="table-responsive" data-toggle="lists">
    <div class="d-flex pb-4 align-items-center">
        <div>
            <!-- Select option -->
            <span class="select-arrow">
                <select id="lengthChange" name="dataTable_length" aria-controls="dataTable" class="custom-select">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </span>
        </div>
        <div id="pageInfo" class="showing-result px-3 py-2 mr-auto"></div>
        <div><a href="@Url.Action("Create", "Courses", new { area = "eLearning" })" class="btn btn-secondary"><i class="la la-plus font-icon" style="font-size: 1.5rem;"></i>Create Course</a></div>
    </div>
    <!-- Table -->
    <table class="table tableStyle1 tabledata">
        <thead>
            <tr>
                <th>#</th>
                <th>@Html.DisplayNameFor(model => model.Courses.Title)</th>
                <th>@Html.DisplayNameFor(model => model.Courses.Code)</th>
                <th>@Html.DisplayNameFor(model => model.Courses.Price)</th>
                <th>@Html.DisplayNameFor(model => model.Courses.Status)</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>
</div>

@section ContentScript{

    <script type="text/javascript">
        $(document).ready(function () {
            var table = $('.tabledata').DataTable({
                serverSide: true,
                processing: true,
                ajax: {
                    "type": "post",
                    "url": '@(WebApiURL)eLearning/Courses/GetAll',
                    "data": function (filter) {             
                        console.log("-", filter);

                        filter.Code = $('#Filters_Code').val();
                        filter.Title = $('#Filters_Title').val();
                        filter.Status = $('#Filters_Status').val();
                        filter.Price = $('#Filters_Price').val();
                    },
                    dataFilter: function (res) {
                        // do what you need to the data before it loads to the table
                        // for debugging only for now
                        return res;
                    },
                    error: function (x, y) {
                        console.log("Error -", x);
                    }
                },
                columns: [
                    {
                        sortable: false,
                        render: function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        data: 'Code',
                        sortable: true
                    },
                    {
                        data: 'Title',
                        sortable: true
                    },                    
                    {
                        data: 'Price',
                        sortable: true
                    },
                    {
                        data: 'Status',
                        sortable: true,
                        render: function (data, type, row, meta) {
                            if (row.Status == 0) {
                                return "<span class='color-grey font-weight-bold'>Draft</span>";
                            }
                            else if (row.Status == 1) {
                                return "<span class='color-yellow font-weight-bold'>Pending Verification</span>";
                            }
                            else if (row.Status == 2) {
                                return "<span class='color-red font-weight-bold'>Pending Amendment</span>";
                            }
                            else if (row.Status == 3) {
                                return "<span class='color-yellow font-weight-bold'>Pending Approval</span>";
                            }
                            else if (row.Status == 4) {
                                return "<span class='color-red font-weight-bold'>Pending Amendment</span>";
                            }
                        }
                    },
                    {
                        sortable: false,
                        render: function (data, type, row, meta) {

                            var action = "";

                            var canview = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseView));
                            var canedit = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseEdit));
                            var canverify = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseVerify));
                            var canapprove1 = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseApproval1));
                            var canapprove2 = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseApproval2));
                            var canapprove3 = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseApproval3));
                            var canpublish = @Json.Encode(CurrentUser.HasAccess(UserAccess.CoursePublish));
                            var canwithdraw = @Json.Encode(CurrentUser.HasAccess(UserAccess.CourseEnroll));

                            action = '<div class="icon-action">';

                            if (canview) {
                                action += '<a href="@Url.Action("Manage", "Courses", new { area = "eLearning" })/' + row.Id + '" data-toggle="tooltip" data-placement="top" title="View"><i class="la la-eye text-muted"></i></a>&nbsp;';
                            }

                            if (row.Status == 0) {          // new
                                if (canedit) {
                                    action += '<a href="@Url.Action("Edit", "Courses", new { area = "eLearning" })/' + row.ID + '" data-toggle="tooltip" data-placement="top" title="Edit"><i class="la la-edit text-muted"></i></a>';
                                    action += '<a href="@Url.Action("Delete", "Courses", new { area = "eLearning" })/' + row.ID + '" data-toggle="tooltip" data-placement="top" title="Delete"><i class="la la-trash-o text-muted"></i></i></a>';
                                }
                            }
                            else if (row.Status == 1) {     // submitted
                                if (canverify || canapprove1 || canapprove2 || canapprove3) {
                                    action += '<a href="@Url.Action("Evaluate", "Courses", new { area = "eLearning" })/' + row.ID + '" data-toggle="tooltip" data-placement="top" title="Evaluate"><i class="la la-edit text-muted"></i></a>';
                                }
                            }
                            else {
                                action += '';
                            }

                            action += '</div>';

                            return action;
                        }
                    }
                ],
                paging: true,
                lengthChange: true,
                searching: true,
                ordering: true,
                orderMulti: false,
                info: true,
                autoWidth: false,
                order: [[1, 'asc']],
                language: {
                    processing: "Processing... <i class='fa fa-refresh fa-spin'></i>",
                    emptyTable: "No Record Found",
                    info: "Showing _START_ - _END_ of _TOTAL_ courses"
                },
                dom: 'rtip'
            });

            $('#lengthChange').val(table.page.len());

            $('#quickSearch').keyup(function () {
                table.search($(this).val()).draw();
            });

            $('#quickSearchBtn').click(function () {
                table.search($(this).val()).draw();
            });

            $('#lengthChange').change(function () {
                table.page.len($(this).val()).draw();
            });

            $('#btnSearch').click(function () {
                table.ajax.reload();
            });

            table.on('order.dt search.dt', function () {
                var info = table.page.info();
                $('#pageInfo').html('Showing ' + (info.start + 1) + ' - ' + info.end + ' of ' + info.recordsTotal + ' courses');
                $('[data-toggle="tooltip"]').tooltip({ trigger: 'hover' });
            }).draw();

        });

    </script>

}

